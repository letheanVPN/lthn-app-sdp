/**
 * Lethean VPN Api
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ServiceEntity.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ServiceEntity_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ServiceEntity_H_


#include "../ModelBase.h"

#include "TimeRangeEntity.h"
#include "VpnSettingsEntity.h"
#include "CertificatesEntity.h"
#include "ProxySettingsEntity.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ServiceEntity
    : public ModelBase
{
public:
    ServiceEntity();
    virtual ~ServiceEntity();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ServiceEntity members

    /// <summary>
    /// ID of the service
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Name of the service
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Type of the service
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// Per minute Cost of the service
    /// </summary>
    utility::string_t getCost() const;
    bool costIsSet() const;
    void unsetCost();

    void setCost(const utility::string_t& value);

    /// <summary>
    /// Amount of pre-paid minutes for first payment
    /// </summary>
    double getFirstPrePaidMinutes() const;
    bool firstPrePaidMinutesIsSet() const;
    void unsetFirstPrePaidMinutes();

    void setFirstPrePaidMinutes(double value);

    /// <summary>
    /// Number of verifications needed for first payment
    /// </summary>
    double getFirstVerificationsNeeded() const;
    bool firstVerificationsNeededIsSet() const;
    void unsetFirstVerificationsNeeded();

    void setFirstVerificationsNeeded(double value);

    /// <summary>
    /// Amount of pre-paid minutes for subsequent payments
    /// </summary>
    double getSubsequentPrePaidMinutes() const;
    bool subsequentPrePaidMinutesIsSet() const;
    void unsetSubsequentPrePaidMinutes();

    void setSubsequentPrePaidMinutes(double value);

    /// <summary>
    /// Number of verifications needed for subsequent payments
    /// </summary>
    double getSubsequentVerificationsNeeded() const;
    bool subsequentVerificationsNeededIsSet() const;
    void unsetSubsequentVerificationsNeeded();

    void setSubsequentVerificationsNeeded(double value);

    /// <summary>
    /// Whether or not refunds are allowed
    /// </summary>
    bool isAllowRefunds() const;
    bool allowRefundsIsSet() const;
    void unsetAllowRefunds();

    void setAllowRefunds(bool value);

    /// <summary>
    /// Service download speed in Mbits
    /// </summary>
    double getDownloadSpeed() const;
    bool downloadSpeedIsSet() const;
    void unsetDownloadSpeed();

    void setDownloadSpeed(double value);

    /// <summary>
    /// Service upload speed in Mbits
    /// </summary>
    double getUploadSpeed() const;
    bool uploadSpeedIsSet() const;
    void unsetUploadSpeed();

    void setUploadSpeed(double value);

    /// <summary>
    /// array containing Proxy related settings. only available if service is of type proxy, null otherwise
    /// </summary>
    std::vector<std::shared_ptr<ProxySettingsEntity>>& getProxy();
    bool proxyIsSet() const;
    void unsetProxy();

    void setProxy(const std::vector<std::shared_ptr<ProxySettingsEntity>>& value);

    /// <summary>
    /// array containing VPN related settings. only available if service is of type vpn, null otherwise
    /// </summary>
    std::vector<std::shared_ptr<VpnSettingsEntity>>& getVpn();
    bool vpnIsSet() const;
    void unsetVpn();

    void setVpn(const std::vector<std::shared_ptr<VpnSettingsEntity>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimeRangeEntity> getValidity() const;
    bool validityIsSet() const;
    void unsetValidity();

    void setValidity(const std::shared_ptr<TimeRangeEntity>& value);

    /// <summary>
    /// disable or not the service
    /// </summary>
    bool isDisable() const;
    bool disableIsSet() const;
    void unsetDisable();

    void setDisable(bool value);

    /// <summary>
    /// inside each service, there should be a field named certificates that has a list of IDs, referencing the certificates at the provider level.
    /// </summary>
    std::vector<std::shared_ptr<CertificatesEntity>>& getCertificates();
    bool certificatesIsSet() const;
    void unsetCertificates();

    void setCertificates(const std::vector<std::shared_ptr<CertificatesEntity>>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Cost;
    bool m_CostIsSet;
    double m_FirstPrePaidMinutes;
    bool m_FirstPrePaidMinutesIsSet;
    double m_FirstVerificationsNeeded;
    bool m_FirstVerificationsNeededIsSet;
    double m_SubsequentPrePaidMinutes;
    bool m_SubsequentPrePaidMinutesIsSet;
    double m_SubsequentVerificationsNeeded;
    bool m_SubsequentVerificationsNeededIsSet;
    bool m_AllowRefunds;
    bool m_AllowRefundsIsSet;
    double m_DownloadSpeed;
    bool m_DownloadSpeedIsSet;
    double m_UploadSpeed;
    bool m_UploadSpeedIsSet;
    std::vector<std::shared_ptr<ProxySettingsEntity>> m_Proxy;
    bool m_ProxyIsSet;
    std::vector<std::shared_ptr<VpnSettingsEntity>> m_Vpn;
    bool m_VpnIsSet;
    std::shared_ptr<TimeRangeEntity> m_Validity;
    bool m_ValidityIsSet;
    bool m_Disable;
    bool m_DisableIsSet;
    std::vector<std::shared_ptr<CertificatesEntity>> m_Certificates;
    bool m_CertificatesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ServiceEntity_H_ */
