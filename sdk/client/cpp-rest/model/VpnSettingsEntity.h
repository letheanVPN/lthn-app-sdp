/**
 * Lethean VPM
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@lethean.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VpnSettingsEntity.h
 *
 * 
 */

#ifndef ORG_LTHN_VPM_CLIENT_MODEL_VpnSettingsEntity_H_
#define ORG_LTHN_VPM_CLIENT_MODEL_VpnSettingsEntity_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace lthn {
namespace vpm {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  VpnSettingsEntity
    : public ModelBase
{
public:
    VpnSettingsEntity();
    virtual ~VpnSettingsEntity();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// VpnSettingsEntity members

    /// <summary>
    /// IP Addresses of endpoints for VPN service only
    /// </summary>
    utility::string_t getEndpoint() const;
    bool endpointIsSet() const;
    void unsetEndpoint();

    void setEndpoint(const utility::string_t& value);

    /// <summary>
    /// Port these settings apply to
    /// </summary>
    utility::string_t getPort() const;
    bool portIsSet() const;
    void unsetPort();

    void setPort(const utility::string_t& value);

    /// <summary>
    /// mtu size parameter for vpn service only
    /// </summary>
    utility::string_t getParameters() const;
    bool parametersIsSet() const;
    void unsetParameters();

    void setParameters(const utility::string_t& value);

    /// <summary>
    /// Terms for the service
    /// </summary>
    utility::string_t getTerms() const;
    bool termsIsSet() const;
    void unsetTerms();

    void setTerms(const utility::string_t& value);

    /// <summary>
    /// a JSON containing access policy - whitelist/blacklist default, allowed/blocked IPs and FQDNs in regex format. This is NOT sent to SDP. It is used by the Dispatcher to orchestrate restrictions on Server
    /// </summary>
    std::vector<utility::string_t>& getPolicy();
    bool policyIsSet() const;
    void unsetPolicy();

    void setPolicy(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Endpoint;
    bool m_EndpointIsSet;
    utility::string_t m_Port;
    bool m_PortIsSet;
    utility::string_t m_Parameters;
    bool m_ParametersIsSet;
    utility::string_t m_Terms;
    bool m_TermsIsSet;
    std::vector<utility::string_t> m_Policy;
    bool m_PolicyIsSet;
};


}
}
}
}
}

#endif /* ORG_LTHN_VPM_CLIENT_MODEL_VpnSettingsEntity_H_ */
