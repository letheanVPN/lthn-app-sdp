/**
 * Lethean VPN Api
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "VpnSettingsEntity.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




VpnSettingsEntity::VpnSettingsEntity()
{
    m_Endpoint = utility::conversions::to_string_t("");
    m_EndpointIsSet = false;
    m_Port = utility::conversions::to_string_t("");
    m_PortIsSet = false;
    m_Parameters = utility::conversions::to_string_t("");
    m_ParametersIsSet = false;
    m_Terms = utility::conversions::to_string_t("");
    m_TermsIsSet = false;
    m_PolicyIsSet = false;
}

VpnSettingsEntity::~VpnSettingsEntity()
{
}

void VpnSettingsEntity::validate()
{
    // TODO: implement validation
}

web::json::value VpnSettingsEntity::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EndpointIsSet)
    {
        val[utility::conversions::to_string_t("endpoint")] = ModelBase::toJson(m_Endpoint);
    }
    if(m_PortIsSet)
    {
        val[utility::conversions::to_string_t("port")] = ModelBase::toJson(m_Port);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_TermsIsSet)
    {
        val[utility::conversions::to_string_t("terms")] = ModelBase::toJson(m_Terms);
    }
    if(m_PolicyIsSet)
    {
        val[utility::conversions::to_string_t("policy")] = ModelBase::toJson(m_Policy);
    }

    return val;
}

bool VpnSettingsEntity::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("endpoint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endpoint"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_endpoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_endpoint);
            setEndpoint(refVal_endpoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("port")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("port"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_port;
            ok &= ModelBase::fromJson(fieldValue, refVal_port);
            setPort(refVal_port);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("terms")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("terms"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_terms;
            ok &= ModelBase::fromJson(fieldValue, refVal_terms);
            setTerms(refVal_terms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("policy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("policy"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_policy;
            ok &= ModelBase::fromJson(fieldValue, refVal_policy);
            setPolicy(refVal_policy);
        }
    }
    return ok;
}

void VpnSettingsEntity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EndpointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endpoint"), m_Endpoint));
    }
    if(m_PortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("port"), m_Port));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_TermsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("terms"), m_Terms));
    }
    if(m_PolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("policy"), m_Policy));
    }
}

bool VpnSettingsEntity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("endpoint")))
    {
        utility::string_t refVal_endpoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endpoint")), refVal_endpoint );
        setEndpoint(refVal_endpoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("port")))
    {
        utility::string_t refVal_port;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("port")), refVal_port );
        setPort(refVal_port);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        utility::string_t refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("terms")))
    {
        utility::string_t refVal_terms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("terms")), refVal_terms );
        setTerms(refVal_terms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("policy")))
    {
        std::vector<utility::string_t> refVal_policy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("policy")), refVal_policy );
        setPolicy(refVal_policy);
    }
    return ok;
}

utility::string_t VpnSettingsEntity::getEndpoint() const
{
    return m_Endpoint;
}

void VpnSettingsEntity::setEndpoint(const utility::string_t& value)
{
    m_Endpoint = value;
    m_EndpointIsSet = true;
}

bool VpnSettingsEntity::endpointIsSet() const
{
    return m_EndpointIsSet;
}

void VpnSettingsEntity::unsetEndpoint()
{
    m_EndpointIsSet = false;
}
utility::string_t VpnSettingsEntity::getPort() const
{
    return m_Port;
}

void VpnSettingsEntity::setPort(const utility::string_t& value)
{
    m_Port = value;
    m_PortIsSet = true;
}

bool VpnSettingsEntity::portIsSet() const
{
    return m_PortIsSet;
}

void VpnSettingsEntity::unsetPort()
{
    m_PortIsSet = false;
}
utility::string_t VpnSettingsEntity::getParameters() const
{
    return m_Parameters;
}

void VpnSettingsEntity::setParameters(const utility::string_t& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool VpnSettingsEntity::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void VpnSettingsEntity::unsetParameters()
{
    m_ParametersIsSet = false;
}
utility::string_t VpnSettingsEntity::getTerms() const
{
    return m_Terms;
}

void VpnSettingsEntity::setTerms(const utility::string_t& value)
{
    m_Terms = value;
    m_TermsIsSet = true;
}

bool VpnSettingsEntity::termsIsSet() const
{
    return m_TermsIsSet;
}

void VpnSettingsEntity::unsetTerms()
{
    m_TermsIsSet = false;
}
std::vector<utility::string_t>& VpnSettingsEntity::getPolicy()
{
    return m_Policy;
}

void VpnSettingsEntity::setPolicy(const std::vector<utility::string_t>& value)
{
    m_Policy = value;
    m_PolicyIsSet = true;
}

bool VpnSettingsEntity::policyIsSet() const
{
    return m_PolicyIsSet;
}

void VpnSettingsEntity::unsetPolicy()
{
    m_PolicyIsSet = false;
}
}
}
}
}


