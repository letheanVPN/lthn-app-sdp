/**
 * Lethean VPM
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@lethean.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TimeRangeEntity.h"

namespace org {
namespace lthn {
namespace vpm {
namespace client {
namespace model {




TimeRangeEntity::TimeRangeEntity()
{
    m_From = utility::datetime();
    m_FromIsSet = false;
    m_To = utility::datetime();
    m_ToIsSet = false;
}

TimeRangeEntity::~TimeRangeEntity()
{
}

void TimeRangeEntity::validate()
{
    // TODO: implement validation
}

web::json::value TimeRangeEntity::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }

    return val;
}

bool TimeRangeEntity::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    return ok;
}

void TimeRangeEntity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
}

bool TimeRangeEntity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        utility::datetime refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        utility::datetime refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    return ok;
}

utility::datetime TimeRangeEntity::getFrom() const
{
    return m_From;
}

void TimeRangeEntity::setFrom(const utility::datetime& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool TimeRangeEntity::fromIsSet() const
{
    return m_FromIsSet;
}

void TimeRangeEntity::unsetFrom()
{
    m_FromIsSet = false;
}
utility::datetime TimeRangeEntity::getTo() const
{
    return m_To;
}

void TimeRangeEntity::setTo(const utility::datetime& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool TimeRangeEntity::toIsSet() const
{
    return m_ToIsSet;
}

void TimeRangeEntity::unsetTo()
{
    m_ToIsSet = false;
}
}
}
}
}
}


