/**
 * Lethean VPN Api
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ServiceEntity.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ServiceEntity::ServiceEntity()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Cost = utility::conversions::to_string_t("");
    m_CostIsSet = false;
    m_FirstPrePaidMinutes = 0.0;
    m_FirstPrePaidMinutesIsSet = false;
    m_FirstVerificationsNeeded = 0.0;
    m_FirstVerificationsNeededIsSet = false;
    m_SubsequentPrePaidMinutes = 0.0;
    m_SubsequentPrePaidMinutesIsSet = false;
    m_SubsequentVerificationsNeeded = 0.0;
    m_SubsequentVerificationsNeededIsSet = false;
    m_AllowRefunds = false;
    m_AllowRefundsIsSet = false;
    m_DownloadSpeed = 0.0;
    m_DownloadSpeedIsSet = false;
    m_UploadSpeed = 0.0;
    m_UploadSpeedIsSet = false;
    m_ProxyIsSet = false;
    m_VpnIsSet = false;
    m_ValidityIsSet = false;
    m_Disable = false;
    m_DisableIsSet = false;
    m_CertificatesIsSet = false;
}

ServiceEntity::~ServiceEntity()
{
}

void ServiceEntity::validate()
{
    // TODO: implement validation
}

web::json::value ServiceEntity::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_CostIsSet)
    {
        val[utility::conversions::to_string_t("cost")] = ModelBase::toJson(m_Cost);
    }
    if(m_FirstPrePaidMinutesIsSet)
    {
        val[utility::conversions::to_string_t("firstPrePaidMinutes")] = ModelBase::toJson(m_FirstPrePaidMinutes);
    }
    if(m_FirstVerificationsNeededIsSet)
    {
        val[utility::conversions::to_string_t("firstVerificationsNeeded")] = ModelBase::toJson(m_FirstVerificationsNeeded);
    }
    if(m_SubsequentPrePaidMinutesIsSet)
    {
        val[utility::conversions::to_string_t("subsequentPrePaidMinutes")] = ModelBase::toJson(m_SubsequentPrePaidMinutes);
    }
    if(m_SubsequentVerificationsNeededIsSet)
    {
        val[utility::conversions::to_string_t("subsequentVerificationsNeeded")] = ModelBase::toJson(m_SubsequentVerificationsNeeded);
    }
    if(m_AllowRefundsIsSet)
    {
        val[utility::conversions::to_string_t("allowRefunds")] = ModelBase::toJson(m_AllowRefunds);
    }
    if(m_DownloadSpeedIsSet)
    {
        val[utility::conversions::to_string_t("downloadSpeed")] = ModelBase::toJson(m_DownloadSpeed);
    }
    if(m_UploadSpeedIsSet)
    {
        val[utility::conversions::to_string_t("uploadSpeed")] = ModelBase::toJson(m_UploadSpeed);
    }
    if(m_ProxyIsSet)
    {
        val[utility::conversions::to_string_t("proxy")] = ModelBase::toJson(m_Proxy);
    }
    if(m_VpnIsSet)
    {
        val[utility::conversions::to_string_t("vpn")] = ModelBase::toJson(m_Vpn);
    }
    if(m_ValidityIsSet)
    {
        val[utility::conversions::to_string_t("validity")] = ModelBase::toJson(m_Validity);
    }
    if(m_DisableIsSet)
    {
        val[utility::conversions::to_string_t("disable")] = ModelBase::toJson(m_Disable);
    }
    if(m_CertificatesIsSet)
    {
        val[utility::conversions::to_string_t("certificates")] = ModelBase::toJson(m_Certificates);
    }

    return val;
}

bool ServiceEntity::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cost")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cost"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cost;
            ok &= ModelBase::fromJson(fieldValue, refVal_cost);
            setCost(refVal_cost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstPrePaidMinutes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("firstPrePaidMinutes"));
        if(!fieldValue.is_null())
        {
            double refVal_firstPrePaidMinutes;
            ok &= ModelBase::fromJson(fieldValue, refVal_firstPrePaidMinutes);
            setFirstPrePaidMinutes(refVal_firstPrePaidMinutes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstVerificationsNeeded")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("firstVerificationsNeeded"));
        if(!fieldValue.is_null())
        {
            double refVal_firstVerificationsNeeded;
            ok &= ModelBase::fromJson(fieldValue, refVal_firstVerificationsNeeded);
            setFirstVerificationsNeeded(refVal_firstVerificationsNeeded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subsequentPrePaidMinutes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subsequentPrePaidMinutes"));
        if(!fieldValue.is_null())
        {
            double refVal_subsequentPrePaidMinutes;
            ok &= ModelBase::fromJson(fieldValue, refVal_subsequentPrePaidMinutes);
            setSubsequentPrePaidMinutes(refVal_subsequentPrePaidMinutes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subsequentVerificationsNeeded")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subsequentVerificationsNeeded"));
        if(!fieldValue.is_null())
        {
            double refVal_subsequentVerificationsNeeded;
            ok &= ModelBase::fromJson(fieldValue, refVal_subsequentVerificationsNeeded);
            setSubsequentVerificationsNeeded(refVal_subsequentVerificationsNeeded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowRefunds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowRefunds"));
        if(!fieldValue.is_null())
        {
            bool refVal_allowRefunds;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowRefunds);
            setAllowRefunds(refVal_allowRefunds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("downloadSpeed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("downloadSpeed"));
        if(!fieldValue.is_null())
        {
            double refVal_downloadSpeed;
            ok &= ModelBase::fromJson(fieldValue, refVal_downloadSpeed);
            setDownloadSpeed(refVal_downloadSpeed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uploadSpeed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uploadSpeed"));
        if(!fieldValue.is_null())
        {
            double refVal_uploadSpeed;
            ok &= ModelBase::fromJson(fieldValue, refVal_uploadSpeed);
            setUploadSpeed(refVal_uploadSpeed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("proxy"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProxySettingsEntity>> refVal_proxy;
            ok &= ModelBase::fromJson(fieldValue, refVal_proxy);
            setProxy(refVal_proxy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vpn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vpn"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<VpnSettingsEntity>> refVal_vpn;
            ok &= ModelBase::fromJson(fieldValue, refVal_vpn);
            setVpn(refVal_vpn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validity"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimeRangeEntity> refVal_validity;
            ok &= ModelBase::fromJson(fieldValue, refVal_validity);
            setValidity(refVal_validity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("disable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("disable"));
        if(!fieldValue.is_null())
        {
            bool refVal_disable;
            ok &= ModelBase::fromJson(fieldValue, refVal_disable);
            setDisable(refVal_disable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("certificates")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("certificates"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CertificatesEntity>> refVal_certificates;
            ok &= ModelBase::fromJson(fieldValue, refVal_certificates);
            setCertificates(refVal_certificates);
        }
    }
    return ok;
}

void ServiceEntity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_CostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cost"), m_Cost));
    }
    if(m_FirstPrePaidMinutesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstPrePaidMinutes"), m_FirstPrePaidMinutes));
    }
    if(m_FirstVerificationsNeededIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstVerificationsNeeded"), m_FirstVerificationsNeeded));
    }
    if(m_SubsequentPrePaidMinutesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subsequentPrePaidMinutes"), m_SubsequentPrePaidMinutes));
    }
    if(m_SubsequentVerificationsNeededIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subsequentVerificationsNeeded"), m_SubsequentVerificationsNeeded));
    }
    if(m_AllowRefundsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowRefunds"), m_AllowRefunds));
    }
    if(m_DownloadSpeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("downloadSpeed"), m_DownloadSpeed));
    }
    if(m_UploadSpeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uploadSpeed"), m_UploadSpeed));
    }
    if(m_ProxyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proxy"), m_Proxy));
    }
    if(m_VpnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vpn"), m_Vpn));
    }
    if(m_ValidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validity"), m_Validity));
    }
    if(m_DisableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disable"), m_Disable));
    }
    if(m_CertificatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("certificates"), m_Certificates));
    }
}

bool ServiceEntity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cost")))
    {
        utility::string_t refVal_cost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cost")), refVal_cost );
        setCost(refVal_cost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstPrePaidMinutes")))
    {
        double refVal_firstPrePaidMinutes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstPrePaidMinutes")), refVal_firstPrePaidMinutes );
        setFirstPrePaidMinutes(refVal_firstPrePaidMinutes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstVerificationsNeeded")))
    {
        double refVal_firstVerificationsNeeded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstVerificationsNeeded")), refVal_firstVerificationsNeeded );
        setFirstVerificationsNeeded(refVal_firstVerificationsNeeded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subsequentPrePaidMinutes")))
    {
        double refVal_subsequentPrePaidMinutes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subsequentPrePaidMinutes")), refVal_subsequentPrePaidMinutes );
        setSubsequentPrePaidMinutes(refVal_subsequentPrePaidMinutes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subsequentVerificationsNeeded")))
    {
        double refVal_subsequentVerificationsNeeded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subsequentVerificationsNeeded")), refVal_subsequentVerificationsNeeded );
        setSubsequentVerificationsNeeded(refVal_subsequentVerificationsNeeded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowRefunds")))
    {
        bool refVal_allowRefunds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowRefunds")), refVal_allowRefunds );
        setAllowRefunds(refVal_allowRefunds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("downloadSpeed")))
    {
        double refVal_downloadSpeed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("downloadSpeed")), refVal_downloadSpeed );
        setDownloadSpeed(refVal_downloadSpeed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uploadSpeed")))
    {
        double refVal_uploadSpeed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uploadSpeed")), refVal_uploadSpeed );
        setUploadSpeed(refVal_uploadSpeed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy")))
    {
        std::vector<std::shared_ptr<ProxySettingsEntity>> refVal_proxy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("proxy")), refVal_proxy );
        setProxy(refVal_proxy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vpn")))
    {
        std::vector<std::shared_ptr<VpnSettingsEntity>> refVal_vpn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vpn")), refVal_vpn );
        setVpn(refVal_vpn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validity")))
    {
        std::shared_ptr<TimeRangeEntity> refVal_validity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validity")), refVal_validity );
        setValidity(refVal_validity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("disable")))
    {
        bool refVal_disable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("disable")), refVal_disable );
        setDisable(refVal_disable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("certificates")))
    {
        std::vector<std::shared_ptr<CertificatesEntity>> refVal_certificates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("certificates")), refVal_certificates );
        setCertificates(refVal_certificates);
    }
    return ok;
}

utility::string_t ServiceEntity::getId() const
{
    return m_Id;
}

void ServiceEntity::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ServiceEntity::idIsSet() const
{
    return m_IdIsSet;
}

void ServiceEntity::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ServiceEntity::getName() const
{
    return m_Name;
}

void ServiceEntity::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ServiceEntity::nameIsSet() const
{
    return m_NameIsSet;
}

void ServiceEntity::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ServiceEntity::getType() const
{
    return m_Type;
}

void ServiceEntity::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ServiceEntity::typeIsSet() const
{
    return m_TypeIsSet;
}

void ServiceEntity::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t ServiceEntity::getCost() const
{
    return m_Cost;
}

void ServiceEntity::setCost(const utility::string_t& value)
{
    m_Cost = value;
    m_CostIsSet = true;
}

bool ServiceEntity::costIsSet() const
{
    return m_CostIsSet;
}

void ServiceEntity::unsetCost()
{
    m_CostIsSet = false;
}
double ServiceEntity::getFirstPrePaidMinutes() const
{
    return m_FirstPrePaidMinutes;
}

void ServiceEntity::setFirstPrePaidMinutes(double value)
{
    m_FirstPrePaidMinutes = value;
    m_FirstPrePaidMinutesIsSet = true;
}

bool ServiceEntity::firstPrePaidMinutesIsSet() const
{
    return m_FirstPrePaidMinutesIsSet;
}

void ServiceEntity::unsetFirstPrePaidMinutes()
{
    m_FirstPrePaidMinutesIsSet = false;
}
double ServiceEntity::getFirstVerificationsNeeded() const
{
    return m_FirstVerificationsNeeded;
}

void ServiceEntity::setFirstVerificationsNeeded(double value)
{
    m_FirstVerificationsNeeded = value;
    m_FirstVerificationsNeededIsSet = true;
}

bool ServiceEntity::firstVerificationsNeededIsSet() const
{
    return m_FirstVerificationsNeededIsSet;
}

void ServiceEntity::unsetFirstVerificationsNeeded()
{
    m_FirstVerificationsNeededIsSet = false;
}
double ServiceEntity::getSubsequentPrePaidMinutes() const
{
    return m_SubsequentPrePaidMinutes;
}

void ServiceEntity::setSubsequentPrePaidMinutes(double value)
{
    m_SubsequentPrePaidMinutes = value;
    m_SubsequentPrePaidMinutesIsSet = true;
}

bool ServiceEntity::subsequentPrePaidMinutesIsSet() const
{
    return m_SubsequentPrePaidMinutesIsSet;
}

void ServiceEntity::unsetSubsequentPrePaidMinutes()
{
    m_SubsequentPrePaidMinutesIsSet = false;
}
double ServiceEntity::getSubsequentVerificationsNeeded() const
{
    return m_SubsequentVerificationsNeeded;
}

void ServiceEntity::setSubsequentVerificationsNeeded(double value)
{
    m_SubsequentVerificationsNeeded = value;
    m_SubsequentVerificationsNeededIsSet = true;
}

bool ServiceEntity::subsequentVerificationsNeededIsSet() const
{
    return m_SubsequentVerificationsNeededIsSet;
}

void ServiceEntity::unsetSubsequentVerificationsNeeded()
{
    m_SubsequentVerificationsNeededIsSet = false;
}
bool ServiceEntity::isAllowRefunds() const
{
    return m_AllowRefunds;
}

void ServiceEntity::setAllowRefunds(bool value)
{
    m_AllowRefunds = value;
    m_AllowRefundsIsSet = true;
}

bool ServiceEntity::allowRefundsIsSet() const
{
    return m_AllowRefundsIsSet;
}

void ServiceEntity::unsetAllowRefunds()
{
    m_AllowRefundsIsSet = false;
}
double ServiceEntity::getDownloadSpeed() const
{
    return m_DownloadSpeed;
}

void ServiceEntity::setDownloadSpeed(double value)
{
    m_DownloadSpeed = value;
    m_DownloadSpeedIsSet = true;
}

bool ServiceEntity::downloadSpeedIsSet() const
{
    return m_DownloadSpeedIsSet;
}

void ServiceEntity::unsetDownloadSpeed()
{
    m_DownloadSpeedIsSet = false;
}
double ServiceEntity::getUploadSpeed() const
{
    return m_UploadSpeed;
}

void ServiceEntity::setUploadSpeed(double value)
{
    m_UploadSpeed = value;
    m_UploadSpeedIsSet = true;
}

bool ServiceEntity::uploadSpeedIsSet() const
{
    return m_UploadSpeedIsSet;
}

void ServiceEntity::unsetUploadSpeed()
{
    m_UploadSpeedIsSet = false;
}
std::vector<std::shared_ptr<ProxySettingsEntity>>& ServiceEntity::getProxy()
{
    return m_Proxy;
}

void ServiceEntity::setProxy(const std::vector<std::shared_ptr<ProxySettingsEntity>>& value)
{
    m_Proxy = value;
    m_ProxyIsSet = true;
}

bool ServiceEntity::proxyIsSet() const
{
    return m_ProxyIsSet;
}

void ServiceEntity::unsetProxy()
{
    m_ProxyIsSet = false;
}
std::vector<std::shared_ptr<VpnSettingsEntity>>& ServiceEntity::getVpn()
{
    return m_Vpn;
}

void ServiceEntity::setVpn(const std::vector<std::shared_ptr<VpnSettingsEntity>>& value)
{
    m_Vpn = value;
    m_VpnIsSet = true;
}

bool ServiceEntity::vpnIsSet() const
{
    return m_VpnIsSet;
}

void ServiceEntity::unsetVpn()
{
    m_VpnIsSet = false;
}
std::shared_ptr<TimeRangeEntity> ServiceEntity::getValidity() const
{
    return m_Validity;
}

void ServiceEntity::setValidity(const std::shared_ptr<TimeRangeEntity>& value)
{
    m_Validity = value;
    m_ValidityIsSet = true;
}

bool ServiceEntity::validityIsSet() const
{
    return m_ValidityIsSet;
}

void ServiceEntity::unsetValidity()
{
    m_ValidityIsSet = false;
}
bool ServiceEntity::isDisable() const
{
    return m_Disable;
}

void ServiceEntity::setDisable(bool value)
{
    m_Disable = value;
    m_DisableIsSet = true;
}

bool ServiceEntity::disableIsSet() const
{
    return m_DisableIsSet;
}

void ServiceEntity::unsetDisable()
{
    m_DisableIsSet = false;
}
std::vector<std::shared_ptr<CertificatesEntity>>& ServiceEntity::getCertificates()
{
    return m_Certificates;
}

void ServiceEntity::setCertificates(const std::vector<std::shared_ptr<CertificatesEntity>>& value)
{
    m_Certificates = value;
    m_CertificatesIsSet = true;
}

bool ServiceEntity::certificatesIsSet() const
{
    return m_CertificatesIsSet;
}

void ServiceEntity::unsetCertificates()
{
    m_CertificatesIsSet = false;
}
}
}
}
}


