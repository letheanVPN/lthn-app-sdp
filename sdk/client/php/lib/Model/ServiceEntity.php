<?php
/**
 * ServiceEntity
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lethean VPN Api
 *
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceEntity Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ServiceEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServiceEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'cost' => 'string',
        'first_pre_paid_minutes' => 'float',
        'first_verifications_needed' => 'float',
        'subsequent_pre_paid_minutes' => 'float',
        'subsequent_verifications_needed' => 'float',
        'allow_refunds' => 'bool',
        'download_speed' => 'float',
        'upload_speed' => 'float',
        'proxy' => '\OpenAPI\Client\Model\ProxySettingsEntity[]',
        'vpn' => '\OpenAPI\Client\Model\VpnSettingsEntity[]',
        'validity' => '\OpenAPI\Client\Model\TimeRangeEntity',
        'disable' => 'bool',
        'certificates' => '\OpenAPI\Client\Model\CertificatesEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'cost' => null,
        'first_pre_paid_minutes' => null,
        'first_verifications_needed' => null,
        'subsequent_pre_paid_minutes' => null,
        'subsequent_verifications_needed' => null,
        'allow_refunds' => null,
        'download_speed' => null,
        'upload_speed' => null,
        'proxy' => null,
        'vpn' => null,
        'validity' => null,
        'disable' => null,
        'certificates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'cost' => 'cost',
        'first_pre_paid_minutes' => 'firstPrePaidMinutes',
        'first_verifications_needed' => 'firstVerificationsNeeded',
        'subsequent_pre_paid_minutes' => 'subsequentPrePaidMinutes',
        'subsequent_verifications_needed' => 'subsequentVerificationsNeeded',
        'allow_refunds' => 'allowRefunds',
        'download_speed' => 'downloadSpeed',
        'upload_speed' => 'uploadSpeed',
        'proxy' => 'proxy',
        'vpn' => 'vpn',
        'validity' => 'validity',
        'disable' => 'disable',
        'certificates' => 'certificates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'cost' => 'setCost',
        'first_pre_paid_minutes' => 'setFirstPrePaidMinutes',
        'first_verifications_needed' => 'setFirstVerificationsNeeded',
        'subsequent_pre_paid_minutes' => 'setSubsequentPrePaidMinutes',
        'subsequent_verifications_needed' => 'setSubsequentVerificationsNeeded',
        'allow_refunds' => 'setAllowRefunds',
        'download_speed' => 'setDownloadSpeed',
        'upload_speed' => 'setUploadSpeed',
        'proxy' => 'setProxy',
        'vpn' => 'setVpn',
        'validity' => 'setValidity',
        'disable' => 'setDisable',
        'certificates' => 'setCertificates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'cost' => 'getCost',
        'first_pre_paid_minutes' => 'getFirstPrePaidMinutes',
        'first_verifications_needed' => 'getFirstVerificationsNeeded',
        'subsequent_pre_paid_minutes' => 'getSubsequentPrePaidMinutes',
        'subsequent_verifications_needed' => 'getSubsequentVerificationsNeeded',
        'allow_refunds' => 'getAllowRefunds',
        'download_speed' => 'getDownloadSpeed',
        'upload_speed' => 'getUploadSpeed',
        'proxy' => 'getProxy',
        'vpn' => 'getVpn',
        'validity' => 'getValidity',
        'disable' => 'getDisable',
        'certificates' => 'getCertificates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_VPN = 'vpn';
    const TYPE_PROXY = 'proxy';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_VPN,
            self::TYPE_PROXY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['first_pre_paid_minutes'] = $data['first_pre_paid_minutes'] ?? null;
        $this->container['first_verifications_needed'] = $data['first_verifications_needed'] ?? null;
        $this->container['subsequent_pre_paid_minutes'] = $data['subsequent_pre_paid_minutes'] ?? null;
        $this->container['subsequent_verifications_needed'] = $data['subsequent_verifications_needed'] ?? null;
        $this->container['allow_refunds'] = $data['allow_refunds'] ?? null;
        $this->container['download_speed'] = $data['download_speed'] ?? null;
        $this->container['upload_speed'] = $data['upload_speed'] ?? null;
        $this->container['proxy'] = $data['proxy'] ?? null;
        $this->container['vpn'] = $data['vpn'] ?? null;
        $this->container['validity'] = $data['validity'] ?? null;
        $this->container['disable'] = $data['disable'] ?? null;
        $this->container['certificates'] = $data['certificates'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 2)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['id']) < 2)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 2.";
        }

        if (!preg_match("/[0-9A-F]{1}[0-9A-F]{1}/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /[0-9A-F]{1}[0-9A-F]{1}/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 32)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 32.";
        }

        if (!preg_match("/^[a-zA-Z0-9 ,.-_]+$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[a-zA-Z0-9 ,.-_]+$/.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        if ((mb_strlen($this->container['cost']) > 14)) {
            $invalidProperties[] = "invalid value for 'cost', the character length must be smaller than or equal to 14.";
        }

        if (!preg_match("/([0-9]{1,5}|[.]{1}[0-9]{1,8})/", $this->container['cost'])) {
            $invalidProperties[] = "invalid value for 'cost', must be conform to the pattern /([0-9]{1,5}|[.]{1}[0-9]{1,8})/.";
        }

        if (!is_null($this->container['first_pre_paid_minutes']) && ($this->container['first_pre_paid_minutes'] > 1440)) {
            $invalidProperties[] = "invalid value for 'first_pre_paid_minutes', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['first_pre_paid_minutes']) && ($this->container['first_pre_paid_minutes'] < 10)) {
            $invalidProperties[] = "invalid value for 'first_pre_paid_minutes', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['first_verifications_needed']) && ($this->container['first_verifications_needed'] > 2)) {
            $invalidProperties[] = "invalid value for 'first_verifications_needed', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['first_verifications_needed']) && ($this->container['first_verifications_needed'] < 0)) {
            $invalidProperties[] = "invalid value for 'first_verifications_needed', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['subsequent_pre_paid_minutes']) && ($this->container['subsequent_pre_paid_minutes'] > 1440)) {
            $invalidProperties[] = "invalid value for 'subsequent_pre_paid_minutes', must be smaller than or equal to 1440.";
        }

        if (!is_null($this->container['subsequent_pre_paid_minutes']) && ($this->container['subsequent_pre_paid_minutes'] < 10)) {
            $invalidProperties[] = "invalid value for 'subsequent_pre_paid_minutes', must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['subsequent_verifications_needed']) && ($this->container['subsequent_verifications_needed'] > 1)) {
            $invalidProperties[] = "invalid value for 'subsequent_verifications_needed', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['subsequent_verifications_needed']) && ($this->container['subsequent_verifications_needed'] < 0)) {
            $invalidProperties[] = "invalid value for 'subsequent_verifications_needed', must be bigger than or equal to 0.";
        }

        if ($this->container['download_speed'] === null) {
            $invalidProperties[] = "'download_speed' can't be null";
        }
        if (($this->container['download_speed'] > 99999999999)) {
            $invalidProperties[] = "invalid value for 'download_speed', must be smaller than or equal to 99999999999.";
        }

        if (($this->container['download_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'download_speed', must be bigger than or equal to 0.";
        }

        if ($this->container['upload_speed'] === null) {
            $invalidProperties[] = "'upload_speed' can't be null";
        }
        if (($this->container['upload_speed'] > 99999999999)) {
            $invalidProperties[] = "invalid value for 'upload_speed', must be smaller than or equal to 99999999999.";
        }

        if (($this->container['upload_speed'] < 0)) {
            $invalidProperties[] = "invalid value for 'upload_speed', must be bigger than or equal to 0.";
        }

        if ($this->container['disable'] === null) {
            $invalidProperties[] = "'disable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the service
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 2)) {
            throw new \InvalidArgumentException('invalid length for $id when calling ServiceEntity., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($id) < 2)) {
            throw new \InvalidArgumentException('invalid length for $id when calling ServiceEntity., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/[0-9A-F]{1}[0-9A-F]{1}/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling ServiceEntity., must conform to the pattern /[0-9A-F]{1}[0-9A-F]{1}/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the service
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 32)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ServiceEntity., must be smaller than or equal to 32.');
        }
        if ((!preg_match("/^[a-zA-Z0-9 ,.-_]+$/", $name))) {
            throw new \InvalidArgumentException("invalid value for $name when calling ServiceEntity., must conform to the pattern /^[a-zA-Z0-9 ,.-_]+$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the service
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string $cost Per minute Cost of the service
     *
     * @return self
     */
    public function setCost($cost)
    {
        if ((mb_strlen($cost) > 14)) {
            throw new \InvalidArgumentException('invalid length for $cost when calling ServiceEntity., must be smaller than or equal to 14.');
        }
        if ((!preg_match("/([0-9]{1,5}|[.]{1}[0-9]{1,8})/", $cost))) {
            throw new \InvalidArgumentException("invalid value for $cost when calling ServiceEntity., must conform to the pattern /([0-9]{1,5}|[.]{1}[0-9]{1,8})/.");
        }

        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets first_pre_paid_minutes
     *
     * @return float|null
     */
    public function getFirstPrePaidMinutes()
    {
        return $this->container['first_pre_paid_minutes'];
    }

    /**
     * Sets first_pre_paid_minutes
     *
     * @param float|null $first_pre_paid_minutes Amount of pre-paid minutes for first payment
     *
     * @return self
     */
    public function setFirstPrePaidMinutes($first_pre_paid_minutes)
    {

        if (!is_null($first_pre_paid_minutes) && ($first_pre_paid_minutes > 1440)) {
            throw new \InvalidArgumentException('invalid value for $first_pre_paid_minutes when calling ServiceEntity., must be smaller than or equal to 1440.');
        }
        if (!is_null($first_pre_paid_minutes) && ($first_pre_paid_minutes < 10)) {
            throw new \InvalidArgumentException('invalid value for $first_pre_paid_minutes when calling ServiceEntity., must be bigger than or equal to 10.');
        }

        $this->container['first_pre_paid_minutes'] = $first_pre_paid_minutes;

        return $this;
    }

    /**
     * Gets first_verifications_needed
     *
     * @return float|null
     */
    public function getFirstVerificationsNeeded()
    {
        return $this->container['first_verifications_needed'];
    }

    /**
     * Sets first_verifications_needed
     *
     * @param float|null $first_verifications_needed Number of verifications needed for first payment
     *
     * @return self
     */
    public function setFirstVerificationsNeeded($first_verifications_needed)
    {

        if (!is_null($first_verifications_needed) && ($first_verifications_needed > 2)) {
            throw new \InvalidArgumentException('invalid value for $first_verifications_needed when calling ServiceEntity., must be smaller than or equal to 2.');
        }
        if (!is_null($first_verifications_needed) && ($first_verifications_needed < 0)) {
            throw new \InvalidArgumentException('invalid value for $first_verifications_needed when calling ServiceEntity., must be bigger than or equal to 0.');
        }

        $this->container['first_verifications_needed'] = $first_verifications_needed;

        return $this;
    }

    /**
     * Gets subsequent_pre_paid_minutes
     *
     * @return float|null
     */
    public function getSubsequentPrePaidMinutes()
    {
        return $this->container['subsequent_pre_paid_minutes'];
    }

    /**
     * Sets subsequent_pre_paid_minutes
     *
     * @param float|null $subsequent_pre_paid_minutes Amount of pre-paid minutes for subsequent payments
     *
     * @return self
     */
    public function setSubsequentPrePaidMinutes($subsequent_pre_paid_minutes)
    {

        if (!is_null($subsequent_pre_paid_minutes) && ($subsequent_pre_paid_minutes > 1440)) {
            throw new \InvalidArgumentException('invalid value for $subsequent_pre_paid_minutes when calling ServiceEntity., must be smaller than or equal to 1440.');
        }
        if (!is_null($subsequent_pre_paid_minutes) && ($subsequent_pre_paid_minutes < 10)) {
            throw new \InvalidArgumentException('invalid value for $subsequent_pre_paid_minutes when calling ServiceEntity., must be bigger than or equal to 10.');
        }

        $this->container['subsequent_pre_paid_minutes'] = $subsequent_pre_paid_minutes;

        return $this;
    }

    /**
     * Gets subsequent_verifications_needed
     *
     * @return float|null
     */
    public function getSubsequentVerificationsNeeded()
    {
        return $this->container['subsequent_verifications_needed'];
    }

    /**
     * Sets subsequent_verifications_needed
     *
     * @param float|null $subsequent_verifications_needed Number of verifications needed for subsequent payments
     *
     * @return self
     */
    public function setSubsequentVerificationsNeeded($subsequent_verifications_needed)
    {

        if (!is_null($subsequent_verifications_needed) && ($subsequent_verifications_needed > 1)) {
            throw new \InvalidArgumentException('invalid value for $subsequent_verifications_needed when calling ServiceEntity., must be smaller than or equal to 1.');
        }
        if (!is_null($subsequent_verifications_needed) && ($subsequent_verifications_needed < 0)) {
            throw new \InvalidArgumentException('invalid value for $subsequent_verifications_needed when calling ServiceEntity., must be bigger than or equal to 0.');
        }

        $this->container['subsequent_verifications_needed'] = $subsequent_verifications_needed;

        return $this;
    }

    /**
     * Gets allow_refunds
     *
     * @return bool|null
     */
    public function getAllowRefunds()
    {
        return $this->container['allow_refunds'];
    }

    /**
     * Sets allow_refunds
     *
     * @param bool|null $allow_refunds Whether or not refunds are allowed
     *
     * @return self
     */
    public function setAllowRefunds($allow_refunds)
    {
        $this->container['allow_refunds'] = $allow_refunds;

        return $this;
    }

    /**
     * Gets download_speed
     *
     * @return float
     */
    public function getDownloadSpeed()
    {
        return $this->container['download_speed'];
    }

    /**
     * Sets download_speed
     *
     * @param float $download_speed Service download speed in Mbits
     *
     * @return self
     */
    public function setDownloadSpeed($download_speed)
    {

        if (($download_speed > 99999999999)) {
            throw new \InvalidArgumentException('invalid value for $download_speed when calling ServiceEntity., must be smaller than or equal to 99999999999.');
        }
        if (($download_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $download_speed when calling ServiceEntity., must be bigger than or equal to 0.');
        }

        $this->container['download_speed'] = $download_speed;

        return $this;
    }

    /**
     * Gets upload_speed
     *
     * @return float
     */
    public function getUploadSpeed()
    {
        return $this->container['upload_speed'];
    }

    /**
     * Sets upload_speed
     *
     * @param float $upload_speed Service upload speed in Mbits
     *
     * @return self
     */
    public function setUploadSpeed($upload_speed)
    {

        if (($upload_speed > 99999999999)) {
            throw new \InvalidArgumentException('invalid value for $upload_speed when calling ServiceEntity., must be smaller than or equal to 99999999999.');
        }
        if (($upload_speed < 0)) {
            throw new \InvalidArgumentException('invalid value for $upload_speed when calling ServiceEntity., must be bigger than or equal to 0.');
        }

        $this->container['upload_speed'] = $upload_speed;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return \OpenAPI\Client\Model\ProxySettingsEntity[]|null
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param \OpenAPI\Client\Model\ProxySettingsEntity[]|null $proxy array containing Proxy related settings. only available if service is of type proxy, null otherwise
     *
     * @return self
     */
    public function setProxy($proxy)
    {
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets vpn
     *
     * @return \OpenAPI\Client\Model\VpnSettingsEntity[]|null
     */
    public function getVpn()
    {
        return $this->container['vpn'];
    }

    /**
     * Sets vpn
     *
     * @param \OpenAPI\Client\Model\VpnSettingsEntity[]|null $vpn array containing VPN related settings. only available if service is of type vpn, null otherwise
     *
     * @return self
     */
    public function setVpn($vpn)
    {
        $this->container['vpn'] = $vpn;

        return $this;
    }

    /**
     * Gets validity
     *
     * @return \OpenAPI\Client\Model\TimeRangeEntity|null
     */
    public function getValidity()
    {
        return $this->container['validity'];
    }

    /**
     * Sets validity
     *
     * @param \OpenAPI\Client\Model\TimeRangeEntity|null $validity validity
     *
     * @return self
     */
    public function setValidity($validity)
    {
        $this->container['validity'] = $validity;

        return $this;
    }

    /**
     * Gets disable
     *
     * @return bool
     */
    public function getDisable()
    {
        return $this->container['disable'];
    }

    /**
     * Sets disable
     *
     * @param bool $disable disable or not the service
     *
     * @return self
     */
    public function setDisable($disable)
    {
        $this->container['disable'] = $disable;

        return $this;
    }

    /**
     * Gets certificates
     *
     * @return \OpenAPI\Client\Model\CertificatesEntity[]|null
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param \OpenAPI\Client\Model\CertificatesEntity[]|null $certificates inside each service, there should be a field named certificates that has a list of IDs, referencing the certificates at the provider level.
     *
     * @return self
     */
    public function setCertificates($certificates)
    {
        $this->container['certificates'] = $certificates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


