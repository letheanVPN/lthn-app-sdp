/**
 * Lethean VPN Api
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnSettingsEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnSettingsEntity::OAIVpnSettingsEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnSettingsEntity::OAIVpnSettingsEntity() {
    this->initializeModel();
}

OAIVpnSettingsEntity::~OAIVpnSettingsEntity() {}

void OAIVpnSettingsEntity::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIVpnSettingsEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnSettingsEntity::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIVpnSettingsEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnSettingsEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(endpoint));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(port));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(parameters));
    }
    if (m_terms_isSet) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(terms));
    }
    if (policy.size() > 0) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(policy));
    }
    return obj;
}

QString OAIVpnSettingsEntity::getEndpoint() const {
    return endpoint;
}
void OAIVpnSettingsEntity::setEndpoint(const QString &endpoint) {
    this->endpoint = endpoint;
    this->m_endpoint_isSet = true;
}

bool OAIVpnSettingsEntity::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIVpnSettingsEntity::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIVpnSettingsEntity::getPort() const {
    return port;
}
void OAIVpnSettingsEntity::setPort(const QString &port) {
    this->port = port;
    this->m_port_isSet = true;
}

bool OAIVpnSettingsEntity::is_port_Set() const{
    return m_port_isSet;
}

bool OAIVpnSettingsEntity::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIVpnSettingsEntity::getParameters() const {
    return parameters;
}
void OAIVpnSettingsEntity::setParameters(const QString &parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

bool OAIVpnSettingsEntity::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIVpnSettingsEntity::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIVpnSettingsEntity::getTerms() const {
    return terms;
}
void OAIVpnSettingsEntity::setTerms(const QString &terms) {
    this->terms = terms;
    this->m_terms_isSet = true;
}

bool OAIVpnSettingsEntity::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIVpnSettingsEntity::is_terms_Valid() const{
    return m_terms_isValid;
}

QList<QString> OAIVpnSettingsEntity::getPolicy() const {
    return policy;
}
void OAIVpnSettingsEntity::setPolicy(const QList<QString> &policy) {
    this->policy = policy;
    this->m_policy_isSet = true;
}

bool OAIVpnSettingsEntity::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIVpnSettingsEntity::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIVpnSettingsEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnSettingsEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_isValid && m_port_isValid && m_parameters_isValid && m_terms_isValid && m_policy_isValid && true;
}

} // namespace OpenAPI
