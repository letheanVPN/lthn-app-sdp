/*
 * Lethean VPM
 *
 * Distributed Virtual Private Marketplace
 *
 * API version: 1
 * Contact: contact@lethean.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lethean-vpm

import (
	"encoding/json"
)

// CertificatesEntity struct for CertificatesEntity
type CertificatesEntity struct {
	// ID only
	Id float32 `json:"id"`
}

// NewCertificatesEntity instantiates a new CertificatesEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatesEntity(id float32) *CertificatesEntity {
	this := CertificatesEntity{}
	this.Id = id
	return &this
}

// NewCertificatesEntityWithDefaults instantiates a new CertificatesEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatesEntityWithDefaults() *CertificatesEntity {
	this := CertificatesEntity{}
	return &this
}

// GetId returns the Id field value
func (o *CertificatesEntity) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CertificatesEntity) GetIdOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CertificatesEntity) SetId(v float32) {
	o.Id = v
}

func (o CertificatesEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableCertificatesEntity struct {
	value *CertificatesEntity
	isSet bool
}

func (v NullableCertificatesEntity) Get() *CertificatesEntity {
	return v.value
}

func (v *NullableCertificatesEntity) Set(val *CertificatesEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatesEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatesEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatesEntity(val *CertificatesEntity) *NullableCertificatesEntity {
	return &NullableCertificatesEntity{value: val, isSet: true}
}

func (v NullableCertificatesEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatesEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


