/**
 * Lethean VPN Api
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VpnSettingsEntity model module.
 * @module model/VpnSettingsEntity
 * @version 1
 */
class VpnSettingsEntity {
    /**
     * Constructs a new <code>VpnSettingsEntity</code>.
     * @alias module:model/VpnSettingsEntity
     * @param endpoint {String} IP Addresses of endpoints for VPN service only
     * @param port {String} Port these settings apply to
     * @param parameters {String} mtu size parameter for vpn service only
     * @param terms {String} Terms for the service
     * @param policy {Array.<String>} a JSON containing access policy - whitelist/blacklist default, allowed/blocked IPs and FQDNs in regex format. This is NOT sent to SDP. It is used by the Dispatcher to orchestrate restrictions on Server
     */
    constructor(endpoint, port, parameters, terms, policy) { 
        
        VpnSettingsEntity.initialize(this, endpoint, port, parameters, terms, policy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endpoint, port, parameters, terms, policy) { 
        obj['endpoint'] = endpoint;
        obj['port'] = port;
        obj['parameters'] = parameters;
        obj['terms'] = terms;
        obj['policy'] = policy;
    }

    /**
     * Constructs a <code>VpnSettingsEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VpnSettingsEntity} obj Optional instance to populate.
     * @return {module:model/VpnSettingsEntity} The populated <code>VpnSettingsEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VpnSettingsEntity();

            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], 'String');
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = ApiClient.convertToType(data['terms'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * IP Addresses of endpoints for VPN service only
 * @member {String} endpoint
 */
VpnSettingsEntity.prototype['endpoint'] = undefined;

/**
 * Port these settings apply to
 * @member {String} port
 */
VpnSettingsEntity.prototype['port'] = undefined;

/**
 * mtu size parameter for vpn service only
 * @member {String} parameters
 */
VpnSettingsEntity.prototype['parameters'] = undefined;

/**
 * Terms for the service
 * @member {String} terms
 */
VpnSettingsEntity.prototype['terms'] = undefined;

/**
 * a JSON containing access policy - whitelist/blacklist default, allowed/blocked IPs and FQDNs in regex format. This is NOT sent to SDP. It is used by the Dispatcher to orchestrate restrictions on Server
 * @member {Array.<String>} policy
 */
VpnSettingsEntity.prototype['policy'] = undefined;






export default VpnSettingsEntity;

