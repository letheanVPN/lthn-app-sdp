/**
 * Lethean VPN Api
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificatesEntity from './CertificatesEntity';
import ProxySettingsEntity from './ProxySettingsEntity';
import TimeRangeEntity from './TimeRangeEntity';
import VpnSettingsEntity from './VpnSettingsEntity';

/**
 * The ServiceEntity model module.
 * @module model/ServiceEntity
 * @version 1
 */
class ServiceEntity {
    /**
     * Constructs a new <code>ServiceEntity</code>.
     * @alias module:model/ServiceEntity
     * @param id {String} ID of the service
     * @param name {String} Name of the service
     * @param type {module:model/ServiceEntity.TypeEnum} Type of the service
     * @param cost {String} Per minute Cost of the service
     * @param downloadSpeed {Number} Service download speed in Mbits
     * @param uploadSpeed {Number} Service upload speed in Mbits
     * @param disable {Boolean} disable or not the service
     */
    constructor(id, name, type, cost, downloadSpeed, uploadSpeed, disable) { 
        
        ServiceEntity.initialize(this, id, name, type, cost, downloadSpeed, uploadSpeed, disable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, type, cost, downloadSpeed, uploadSpeed, disable) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['type'] = type;
        obj['cost'] = cost;
        obj['downloadSpeed'] = downloadSpeed;
        obj['uploadSpeed'] = uploadSpeed;
        obj['disable'] = disable;
    }

    /**
     * Constructs a <code>ServiceEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceEntity} obj Optional instance to populate.
     * @return {module:model/ServiceEntity} The populated <code>ServiceEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceEntity();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'String');
            }
            if (data.hasOwnProperty('firstPrePaidMinutes')) {
                obj['firstPrePaidMinutes'] = ApiClient.convertToType(data['firstPrePaidMinutes'], 'Number');
            }
            if (data.hasOwnProperty('firstVerificationsNeeded')) {
                obj['firstVerificationsNeeded'] = ApiClient.convertToType(data['firstVerificationsNeeded'], 'Number');
            }
            if (data.hasOwnProperty('subsequentPrePaidMinutes')) {
                obj['subsequentPrePaidMinutes'] = ApiClient.convertToType(data['subsequentPrePaidMinutes'], 'Number');
            }
            if (data.hasOwnProperty('subsequentVerificationsNeeded')) {
                obj['subsequentVerificationsNeeded'] = ApiClient.convertToType(data['subsequentVerificationsNeeded'], 'Number');
            }
            if (data.hasOwnProperty('allowRefunds')) {
                obj['allowRefunds'] = ApiClient.convertToType(data['allowRefunds'], 'Boolean');
            }
            if (data.hasOwnProperty('downloadSpeed')) {
                obj['downloadSpeed'] = ApiClient.convertToType(data['downloadSpeed'], 'Number');
            }
            if (data.hasOwnProperty('uploadSpeed')) {
                obj['uploadSpeed'] = ApiClient.convertToType(data['uploadSpeed'], 'Number');
            }
            if (data.hasOwnProperty('proxy')) {
                obj['proxy'] = ApiClient.convertToType(data['proxy'], [ProxySettingsEntity]);
            }
            if (data.hasOwnProperty('vpn')) {
                obj['vpn'] = ApiClient.convertToType(data['vpn'], [VpnSettingsEntity]);
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = TimeRangeEntity.constructFromObject(data['validity']);
            }
            if (data.hasOwnProperty('disable')) {
                obj['disable'] = ApiClient.convertToType(data['disable'], 'Boolean');
            }
            if (data.hasOwnProperty('certificates')) {
                obj['certificates'] = ApiClient.convertToType(data['certificates'], [CertificatesEntity]);
            }
        }
        return obj;
    }


}

/**
 * ID of the service
 * @member {String} id
 */
ServiceEntity.prototype['id'] = undefined;

/**
 * Name of the service
 * @member {String} name
 */
ServiceEntity.prototype['name'] = undefined;

/**
 * Type of the service
 * @member {module:model/ServiceEntity.TypeEnum} type
 */
ServiceEntity.prototype['type'] = undefined;

/**
 * Per minute Cost of the service
 * @member {String} cost
 */
ServiceEntity.prototype['cost'] = undefined;

/**
 * Amount of pre-paid minutes for first payment
 * @member {Number} firstPrePaidMinutes
 */
ServiceEntity.prototype['firstPrePaidMinutes'] = undefined;

/**
 * Number of verifications needed for first payment
 * @member {Number} firstVerificationsNeeded
 */
ServiceEntity.prototype['firstVerificationsNeeded'] = undefined;

/**
 * Amount of pre-paid minutes for subsequent payments
 * @member {Number} subsequentPrePaidMinutes
 */
ServiceEntity.prototype['subsequentPrePaidMinutes'] = undefined;

/**
 * Number of verifications needed for subsequent payments
 * @member {Number} subsequentVerificationsNeeded
 */
ServiceEntity.prototype['subsequentVerificationsNeeded'] = undefined;

/**
 * Whether or not refunds are allowed
 * @member {Boolean} allowRefunds
 */
ServiceEntity.prototype['allowRefunds'] = undefined;

/**
 * Service download speed in Mbits
 * @member {Number} downloadSpeed
 */
ServiceEntity.prototype['downloadSpeed'] = undefined;

/**
 * Service upload speed in Mbits
 * @member {Number} uploadSpeed
 */
ServiceEntity.prototype['uploadSpeed'] = undefined;

/**
 * array containing Proxy related settings. only available if service is of type proxy, null otherwise
 * @member {Array.<module:model/ProxySettingsEntity>} proxy
 */
ServiceEntity.prototype['proxy'] = undefined;

/**
 * array containing VPN related settings. only available if service is of type vpn, null otherwise
 * @member {Array.<module:model/VpnSettingsEntity>} vpn
 */
ServiceEntity.prototype['vpn'] = undefined;

/**
 * @member {module:model/TimeRangeEntity} validity
 */
ServiceEntity.prototype['validity'] = undefined;

/**
 * disable or not the service
 * @member {Boolean} disable
 */
ServiceEntity.prototype['disable'] = undefined;

/**
 * inside each service, there should be a field named certificates that has a list of IDs, referencing the certificates at the provider level.
 * @member {Array.<module:model/CertificatesEntity>} certificates
 */
ServiceEntity.prototype['certificates'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ServiceEntity['TypeEnum'] = {

    /**
     * value: "vpn"
     * @const
     */
    "vpn": "vpn",

    /**
     * value: "proxy"
     * @const
     */
    "proxy": "proxy"
};



export default ServiceEntity;

