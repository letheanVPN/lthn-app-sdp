#
# Lethean VPM
# Distributed Virtual Private Marketplace
# Version: 1
# Contact: contact@lethean.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
ID of the service
.PARAMETER Name
Name of the service
.PARAMETER Type
Type of the service
.PARAMETER Cost
Per minute Cost of the service
.PARAMETER FirstPrePaidMinutes
Amount of pre-paid minutes for first payment
.PARAMETER FirstVerificationsNeeded
Number of verifications needed for first payment
.PARAMETER SubsequentPrePaidMinutes
Amount of pre-paid minutes for subsequent payments
.PARAMETER SubsequentVerificationsNeeded
Number of verifications needed for subsequent payments
.PARAMETER AllowRefunds
Whether or not refunds are allowed
.PARAMETER DownloadSpeed
Service download speed in Mbits
.PARAMETER UploadSpeed
Service upload speed in Mbits
.PARAMETER Proxy
array containing Proxy related settings. only available if service is of type proxy, null otherwise
.PARAMETER Vpn
array containing VPN related settings. only available if service is of type vpn, null otherwise
.PARAMETER Validity
No description available.
.PARAMETER Disable
disable or not the service
.PARAMETER Certificates
inside each service, there should be a field named certificates that has a list of IDs, referencing the certificates at the provider level.
.OUTPUTS

ServiceEntity<PSCustomObject>
#>

function Initialize-ServiceEntity {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("[0-9A-F]{1}[0-9A-F]{1}")]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9 ,.-_]+$")]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("vpn", "proxy")]
        [String]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("([0-9]{1,5}|[.]{1}[0-9]{1,8})")]
        [String]
        ${Cost},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FirstPrePaidMinutes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FirstVerificationsNeeded},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SubsequentPrePaidMinutes},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SubsequentVerificationsNeeded},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowRefunds},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${DownloadSpeed},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${UploadSpeed},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Proxy},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Vpn},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Validity},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Disable},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Certificates}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ServiceEntity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Id -and $Id.length -gt 2) {
            throw "invalid value for 'Id', the character length must be smaller than or equal to 2."
        }

        if (!$Id -and $Id.length -lt 2) {
            throw "invalid value for 'Id', the character length must be great than or equal to 2."
        }

        if ($Name -eq $null) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 32) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 32."
        }

        if ($Type -eq $null) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($Cost -eq $null) {
            throw "invalid value for 'Cost', 'Cost' cannot be null."
        }

        if ($Cost.length -gt 14) {
            throw "invalid value for 'Cost', the character length must be smaller than or equal to 14."
        }

        if ($FirstPrePaidMinutes -and $FirstPrePaidMinutes -gt 1440) {
          throw "invalid value for 'FirstPrePaidMinutes', must be smaller than or equal to 1440."
        }

        if ($FirstPrePaidMinutes -and $FirstPrePaidMinutes -lt 10) {
          throw "invalid value for 'FirstPrePaidMinutes', must be greater than or equal to 10."
        }

        if ($FirstVerificationsNeeded -and $FirstVerificationsNeeded -gt 2) {
          throw "invalid value for 'FirstVerificationsNeeded', must be smaller than or equal to 2."
        }

        if ($FirstVerificationsNeeded -and $FirstVerificationsNeeded -lt 0) {
          throw "invalid value for 'FirstVerificationsNeeded', must be greater than or equal to 0."
        }

        if ($SubsequentPrePaidMinutes -and $SubsequentPrePaidMinutes -gt 1440) {
          throw "invalid value for 'SubsequentPrePaidMinutes', must be smaller than or equal to 1440."
        }

        if ($SubsequentPrePaidMinutes -and $SubsequentPrePaidMinutes -lt 10) {
          throw "invalid value for 'SubsequentPrePaidMinutes', must be greater than or equal to 10."
        }

        if ($SubsequentVerificationsNeeded -and $SubsequentVerificationsNeeded -gt 1) {
          throw "invalid value for 'SubsequentVerificationsNeeded', must be smaller than or equal to 1."
        }

        if ($SubsequentVerificationsNeeded -and $SubsequentVerificationsNeeded -lt 0) {
          throw "invalid value for 'SubsequentVerificationsNeeded', must be greater than or equal to 0."
        }

        if ($DownloadSpeed -eq $null) {
            throw "invalid value for 'DownloadSpeed', 'DownloadSpeed' cannot be null."
        }

        if ($DownloadSpeed -gt 99999999999) {
          throw "invalid value for 'DownloadSpeed', must be smaller than or equal to 99999999999."
        }

        if ($DownloadSpeed -lt 0) {
          throw "invalid value for 'DownloadSpeed', must be greater than or equal to 0."
        }

        if ($UploadSpeed -eq $null) {
            throw "invalid value for 'UploadSpeed', 'UploadSpeed' cannot be null."
        }

        if ($UploadSpeed -gt 99999999999) {
          throw "invalid value for 'UploadSpeed', must be smaller than or equal to 99999999999."
        }

        if ($UploadSpeed -lt 0) {
          throw "invalid value for 'UploadSpeed', must be greater than or equal to 0."
        }

        if ($Disable -eq $null) {
            throw "invalid value for 'Disable', 'Disable' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "cost" = ${Cost}
            "firstPrePaidMinutes" = ${FirstPrePaidMinutes}
            "firstVerificationsNeeded" = ${FirstVerificationsNeeded}
            "subsequentPrePaidMinutes" = ${SubsequentPrePaidMinutes}
            "subsequentVerificationsNeeded" = ${SubsequentVerificationsNeeded}
            "allowRefunds" = ${AllowRefunds}
            "downloadSpeed" = ${DownloadSpeed}
            "uploadSpeed" = ${UploadSpeed}
            "proxy" = ${Proxy}
            "vpn" = ${Vpn}
            "validity" = ${Validity}
            "disable" = ${Disable}
            "certificates" = ${Certificates}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceEntity<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceEntity<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceEntity<PSCustomObject>
#>
function ConvertFrom-JsonToServiceEntity {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ServiceEntity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServiceEntity
        $AllProperties = ("id", "name", "type", "cost", "firstPrePaidMinutes", "firstVerificationsNeeded", "subsequentPrePaidMinutes", "subsequentVerificationsNeeded", "allowRefunds", "downloadSpeed", "uploadSpeed", "proxy", "vpn", "validity", "disable", "certificates")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cost"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cost' missing."
        } else {
            $Cost = $JsonParameters.PSobject.Properties["cost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downloadSpeed"))) {
            throw "Error! JSON cannot be serialized due to the required property 'downloadSpeed' missing."
        } else {
            $DownloadSpeed = $JsonParameters.PSobject.Properties["downloadSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uploadSpeed"))) {
            throw "Error! JSON cannot be serialized due to the required property 'uploadSpeed' missing."
        } else {
            $UploadSpeed = $JsonParameters.PSobject.Properties["uploadSpeed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'disable' missing."
        } else {
            $Disable = $JsonParameters.PSobject.Properties["disable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstPrePaidMinutes"))) { #optional property not found
            $FirstPrePaidMinutes = $null
        } else {
            $FirstPrePaidMinutes = $JsonParameters.PSobject.Properties["firstPrePaidMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstVerificationsNeeded"))) { #optional property not found
            $FirstVerificationsNeeded = $null
        } else {
            $FirstVerificationsNeeded = $JsonParameters.PSobject.Properties["firstVerificationsNeeded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsequentPrePaidMinutes"))) { #optional property not found
            $SubsequentPrePaidMinutes = $null
        } else {
            $SubsequentPrePaidMinutes = $JsonParameters.PSobject.Properties["subsequentPrePaidMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsequentVerificationsNeeded"))) { #optional property not found
            $SubsequentVerificationsNeeded = $null
        } else {
            $SubsequentVerificationsNeeded = $JsonParameters.PSobject.Properties["subsequentVerificationsNeeded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowRefunds"))) { #optional property not found
            $AllowRefunds = $null
        } else {
            $AllowRefunds = $JsonParameters.PSobject.Properties["allowRefunds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proxy"))) { #optional property not found
            $Proxy = $null
        } else {
            $Proxy = $JsonParameters.PSobject.Properties["proxy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vpn"))) { #optional property not found
            $Vpn = $null
        } else {
            $Vpn = $JsonParameters.PSobject.Properties["vpn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validity"))) { #optional property not found
            $Validity = $null
        } else {
            $Validity = $JsonParameters.PSobject.Properties["validity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certificates"))) { #optional property not found
            $Certificates = $null
        } else {
            $Certificates = $JsonParameters.PSobject.Properties["certificates"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "cost" = ${Cost}
            "firstPrePaidMinutes" = ${FirstPrePaidMinutes}
            "firstVerificationsNeeded" = ${FirstVerificationsNeeded}
            "subsequentPrePaidMinutes" = ${SubsequentPrePaidMinutes}
            "subsequentVerificationsNeeded" = ${SubsequentVerificationsNeeded}
            "allowRefunds" = ${AllowRefunds}
            "downloadSpeed" = ${DownloadSpeed}
            "uploadSpeed" = ${UploadSpeed}
            "proxy" = ${Proxy}
            "vpn" = ${Vpn}
            "validity" = ${Validity}
            "disable" = ${Disable}
            "certificates" = ${Certificates}
        }

        return $PSO
    }

}

