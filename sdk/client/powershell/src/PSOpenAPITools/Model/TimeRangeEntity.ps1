#
# Lethean VPN Api
# Distributed Virtual Private Marketplace
# Version: 1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VarFrom
YYYY-MM-DDT00:00:00Z
.PARAMETER To
YYYY-MM-DDT00:00:00Z
.OUTPUTS

TimeRangeEntity<PSCustomObject>
#>

function Initialize-TimeRangeEntity {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${VarFrom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${To}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TimeRangeEntity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($VarFrom -eq $null) {
            throw "invalid value for 'VarFrom', 'VarFrom' cannot be null."
        }

        if ($To -eq $null) {
            throw "invalid value for 'To', 'To' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "from" = ${VarFrom}
            "to" = ${To}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TimeRangeEntity<PSCustomObject>

.DESCRIPTION

Convert from JSON to TimeRangeEntity<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TimeRangeEntity<PSCustomObject>
#>
function ConvertFrom-JsonToTimeRangeEntity {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TimeRangeEntity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TimeRangeEntity
        $AllProperties = ("from", "to")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'from' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) {
            throw "Error! JSON cannot be serialized due to the required property 'from' missing."
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) {
            throw "Error! JSON cannot be serialized due to the required property 'to' missing."
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        $PSO = [PSCustomObject]@{
            "from" = ${VarFrom}
            "to" = ${To}
        }

        return $PSO
    }

}

