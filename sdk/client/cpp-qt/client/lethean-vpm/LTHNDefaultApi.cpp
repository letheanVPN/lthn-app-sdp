/**
 * Lethean VPM
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@lethean.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "LTHNDefaultApi.h"
#include "LTHNServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace lthn {
namespace vpm {
namespace client {

LTHNDefaultApi::LTHNDefaultApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

LTHNDefaultApi::~LTHNDefaultApi() {
}

void LTHNDefaultApi::initializeServerConfigs(){
    //Default server
    QList<LTHNServerConfiguration> defaultConf = QList<LTHNServerConfiguration>();
    //varying endpoint server
    QList<LTHNServerConfiguration> serverConf = QList<LTHNServerConfiguration>();
    defaultConf.append(LTHNServerConfiguration(
    QUrl("https://dvpm.io"),
    "No description provided",
    QMap<QString, LTHNServerVariable>()));
    _serverConfigs.insert("cacheStats", defaultConf);
    _serverIndices.insert("cacheStats", 0);
    _serverConfigs.insert("sigVerify", defaultConf);
    _serverIndices.insert("sigVerify", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int LTHNDefaultApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value){
    auto it = _serverConfigs.find(operation);
    if(it != _serverConfigs.end() && serverIndex < it.value().size() ){
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void LTHNDefaultApi::setServerIndex(const QString &operation, int serverIndex){
    if(_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size() )
        _serverIndices[operation] = serverIndex;
}

void LTHNDefaultApi::setApiKey(const QString &apiKeyName, const QString &apiKey){
    _apiKeys.insert(apiKeyName,apiKey);
}

void LTHNDefaultApi::setBearerToken(const QString &token){
    _bearerToken = token;
}

void LTHNDefaultApi::setUsername(const QString &username) {
    _username = username;
}

void LTHNDefaultApi::setPassword(const QString &password) {
    _password = password;
}


void LTHNDefaultApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void LTHNDefaultApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void LTHNDefaultApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int LTHNDefaultApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, LTHNServerVariable> &variables){
    if(_serverConfigs.contains(operation)){
        _serverConfigs[operation].append(LTHNServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    }else{
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void LTHNDefaultApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, LTHNServerVariable> &variables){
    for(auto e : _serverIndices.keys()){
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void LTHNDefaultApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, LTHNServerVariable> &variables){
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void LTHNDefaultApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void LTHNDefaultApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void LTHNDefaultApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void LTHNDefaultApi::abortRequests(){
    emit abortRequestsSignal();
}

QString LTHNDefaultApi::getParamStylePrefix(QString style){
    if(style == "matrix"){
        return ";";
    }else if(style == "label"){
        return ".";
    }else if(style == "form"){
        return "&";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "&";
    }else if(style == "pipeDelimited"){
        return "&";
    }else{
        return "none";
    }
}

QString LTHNDefaultApi::getParamStyleSuffix(QString style){
    if(style == "matrix"){
        return "=";
    }else if(style == "label"){
        return "";
    }else if(style == "form"){
        return "=";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "=";
    }else if(style == "pipeDelimited"){
        return "=";
    }else{
        return "none";
    }
}

QString LTHNDefaultApi::getParamStyleDelimiter(QString style, QString name, bool isExplode){

    if(style == "matrix"){
        return (isExplode) ? ";" + name + "=" : ",";

    }else if(style == "label"){
        return (isExplode) ? "." : ",";

    }else if(style == "form"){
        return (isExplode) ? "&" + name + "=" : ",";

    }else if(style == "simple"){
        return ",";
    }else if(style == "spaceDelimited"){
        return (isExplode) ? "&" + name + "=" : " ";

    }else if(style == "pipeDelimited"){
        return (isExplode) ? "&" + name + "=" : "|";

    }else if(style == "deepObject"){
        return (isExplode) ? "&" : "none";

    }else {
        return "none";
    }
}

void LTHNDefaultApi::cacheStats() {
    QString fullPath = QString(_serverConfigs["cacheStats"][_serverIndices.value("cacheStats")].URL()+"/v1/cache/index");
    
    LTHNHttpRequestWorker *worker = new LTHNHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    LTHNHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &LTHNHttpRequestWorker::on_execution_finished, this, &LTHNDefaultApi::cacheStatsCallback);
    connect(this, &LTHNDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<LTHNHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void LTHNDefaultApi::cacheStatsCallback(LTHNHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit cacheStatsSignal();
        emit cacheStatsSignalFull(worker);
    } else {
        emit cacheStatsSignalE(error_type, error_str);
        emit cacheStatsSignalEFull(worker, error_type, error_str);
    }
}

void LTHNDefaultApi::sigVerify() {
    QString fullPath = QString(_serverConfigs["sigVerify"][_serverIndices.value("sigVerify")].URL()+"/v1/signature/get");
    
    LTHNHttpRequestWorker *worker = new LTHNHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    LTHNHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &LTHNHttpRequestWorker::on_execution_finished, this, &LTHNDefaultApi::sigVerifyCallback);
    connect(this, &LTHNDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<LTHNHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void LTHNDefaultApi::sigVerifyCallback(LTHNHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sigVerifySignal();
        emit sigVerifySignalFull(worker);
    } else {
        emit sigVerifySignalE(error_type, error_str);
        emit sigVerifySignalEFull(worker, error_type, error_str);
    }
}

} // namespace lthn
} // namespace vpm
} // namespace client
