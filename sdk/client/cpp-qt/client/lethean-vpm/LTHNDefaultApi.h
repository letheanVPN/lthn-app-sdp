/**
 * Lethean VPM
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@lethean.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef LTHN_LTHNDefaultApi_H
#define LTHN_LTHNDefaultApi_H

#include "LTHNHelpers.h"
#include "LTHNHttpRequest.h"
#include "LTHNServerConfiguration.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace lthn {
namespace vpm {
namespace client {

class LTHNDefaultApi : public QObject {
    Q_OBJECT

public:
    LTHNDefaultApi(const int timeOut = 0);
    ~LTHNDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, LTHNServerVariable> &variables = QMap<QString, LTHNServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, LTHNServerVariable> &variables =  QMap<QString, LTHNServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, LTHNServerVariable> &variables =  QMap<QString, LTHNServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);


    void cacheStats();


    void sigVerify();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<LTHNServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void cacheStatsCallback(LTHNHttpRequestWorker *worker);
    void sigVerifyCallback(LTHNHttpRequestWorker *worker);

signals:

    void cacheStatsSignal();
    void sigVerifySignal();

    void cacheStatsSignalFull(LTHNHttpRequestWorker *worker);
    void sigVerifySignalFull(LTHNHttpRequestWorker *worker);

    void cacheStatsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sigVerifySignalE(QNetworkReply::NetworkError error_type, QString error_str);

    void cacheStatsSignalEFull(LTHNHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sigVerifySignalEFull(LTHNHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace lthn
} // namespace vpm
} // namespace client
#endif
