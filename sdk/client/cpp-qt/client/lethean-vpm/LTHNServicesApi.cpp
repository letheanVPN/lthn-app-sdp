/**
 * Lethean VPM
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@lethean.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "LTHNServicesApi.h"
#include "LTHNServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace lthn {
namespace vpm {
namespace client {

LTHNServicesApi::LTHNServicesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

LTHNServicesApi::~LTHNServicesApi() {
}

void LTHNServicesApi::initializeServerConfigs(){
    //Default server
    QList<LTHNServerConfiguration> defaultConf = QList<LTHNServerConfiguration>();
    //varying endpoint server
    QList<LTHNServerConfiguration> serverConf = QList<LTHNServerConfiguration>();
    defaultConf.append(LTHNServerConfiguration(
    QUrl("https://dvpm.io"),
    "No description provided",
    QMap<QString, LTHNServerVariable>()));
    _serverConfigs.insert("create", defaultConf);
    _serverIndices.insert("create", 0);
    _serverConfigs.insert("findOne", defaultConf);
    _serverIndices.insert("findOne", 0);
    _serverConfigs.insert("list", defaultConf);
    _serverIndices.insert("list", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int LTHNServicesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value){
    auto it = _serverConfigs.find(operation);
    if(it != _serverConfigs.end() && serverIndex < it.value().size() ){
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void LTHNServicesApi::setServerIndex(const QString &operation, int serverIndex){
    if(_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size() )
        _serverIndices[operation] = serverIndex;
}

void LTHNServicesApi::setApiKey(const QString &apiKeyName, const QString &apiKey){
    _apiKeys.insert(apiKeyName,apiKey);
}

void LTHNServicesApi::setBearerToken(const QString &token){
    _bearerToken = token;
}

void LTHNServicesApi::setUsername(const QString &username) {
    _username = username;
}

void LTHNServicesApi::setPassword(const QString &password) {
    _password = password;
}


void LTHNServicesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void LTHNServicesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void LTHNServicesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int LTHNServicesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, LTHNServerVariable> &variables){
    if(_serverConfigs.contains(operation)){
        _serverConfigs[operation].append(LTHNServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    }else{
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void LTHNServicesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, LTHNServerVariable> &variables){
    for(auto e : _serverIndices.keys()){
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void LTHNServicesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, LTHNServerVariable> &variables){
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void LTHNServicesApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void LTHNServicesApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void LTHNServicesApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void LTHNServicesApi::abortRequests(){
    emit abortRequestsSignal();
}

QString LTHNServicesApi::getParamStylePrefix(QString style){
    if(style == "matrix"){
        return ";";
    }else if(style == "label"){
        return ".";
    }else if(style == "form"){
        return "&";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "&";
    }else if(style == "pipeDelimited"){
        return "&";
    }else{
        return "none";
    }
}

QString LTHNServicesApi::getParamStyleSuffix(QString style){
    if(style == "matrix"){
        return "=";
    }else if(style == "label"){
        return "";
    }else if(style == "form"){
        return "=";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "=";
    }else if(style == "pipeDelimited"){
        return "=";
    }else{
        return "none";
    }
}

QString LTHNServicesApi::getParamStyleDelimiter(QString style, QString name, bool isExplode){

    if(style == "matrix"){
        return (isExplode) ? ";" + name + "=" : ",";

    }else if(style == "label"){
        return (isExplode) ? "." : ",";

    }else if(style == "form"){
        return (isExplode) ? "&" + name + "=" : ",";

    }else if(style == "simple"){
        return ",";
    }else if(style == "spaceDelimited"){
        return (isExplode) ? "&" + name + "=" : " ";

    }else if(style == "pipeDelimited"){
        return (isExplode) ? "&" + name + "=" : "|";

    }else if(style == "deepObject"){
        return (isExplode) ? "&" : "none";

    }else {
        return "none";
    }
}

void LTHNServicesApi::create(const LTHNServiceEntity &lthn_service_entity) {
    QString fullPath = QString(_serverConfigs["create"][_serverIndices.value("create")].URL()+"/v1/service/add");
    
    LTHNHttpRequestWorker *worker = new LTHNHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    LTHNHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = lthn_service_entity.asJson().toUtf8();
        input.request_body.append(output);
    }
    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &LTHNHttpRequestWorker::on_execution_finished, this, &LTHNServicesApi::createCallback);
    connect(this, &LTHNServicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<LTHNHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void LTHNServicesApi::createCallback(LTHNHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    LTHNServiceEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createSignal(output);
        emit createSignalFull(worker, output);
    } else {
        emit createSignalE(output, error_type, error_str);
        emit createSignalEFull(worker, error_type, error_str);
    }
}

void LTHNServicesApi::findOne(const QString &client) {
    QString fullPath = QString(_serverConfigs["findOne"][_serverIndices.value("findOne")].URL()+"/v1/service/search/{client}");
    
    
    {
        QString clientPathParam("{");
        clientPathParam.append("client").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client"+pathSuffix : pathPrefix;
        fullPath.replace(clientPathParam, paramString+QUrl::toPercentEncoding(::lthn::vpm::client::toStringValue(client)));
    }
    LTHNHttpRequestWorker *worker = new LTHNHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    LTHNHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &LTHNHttpRequestWorker::on_execution_finished, this, &LTHNServicesApi::findOneCallback);
    connect(this, &LTHNServicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<LTHNHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void LTHNServicesApi::findOneCallback(LTHNHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QString output;
    ::lthn::vpm::client::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit findOneSignal(output);
        emit findOneSignalFull(worker, output);
    } else {
        emit findOneSignalE(output, error_type, error_str);
        emit findOneSignalEFull(worker, error_type, error_str);
    }
}

void LTHNServicesApi::list() {
    QString fullPath = QString(_serverConfigs["list"][_serverIndices.value("list")].URL()+"/v1/service/search");
    
    LTHNHttpRequestWorker *worker = new LTHNHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    LTHNHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &LTHNHttpRequestWorker::on_execution_finished, this, &LTHNServicesApi::listCallback);
    connect(this, &LTHNServicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<LTHNHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void LTHNServicesApi::listCallback(LTHNHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QString output;
    ::lthn::vpm::client::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listSignal(output);
        emit listSignalFull(worker, output);
    } else {
        emit listSignalE(output, error_type, error_str);
        emit listSignalEFull(worker, error_type, error_str);
    }
}

} // namespace lthn
} // namespace vpm
} // namespace client
