/**
 * Lethean VPM
 * Distributed Virtual Private Marketplace
 *
 * The version of the OpenAPI document: 1
 * Contact: contact@lethean.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "LTHNServiceEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "LTHNHelpers.h"

namespace lthn {
namespace vpm {
namespace client {

LTHNServiceEntity::LTHNServiceEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

LTHNServiceEntity::LTHNServiceEntity() {
    this->initializeModel();
}

LTHNServiceEntity::~LTHNServiceEntity() {}

void LTHNServiceEntity::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_first_pre_paid_minutes_isSet = false;
    m_first_pre_paid_minutes_isValid = false;

    m_first_verifications_needed_isSet = false;
    m_first_verifications_needed_isValid = false;

    m_subsequent_pre_paid_minutes_isSet = false;
    m_subsequent_pre_paid_minutes_isValid = false;

    m_subsequent_verifications_needed_isSet = false;
    m_subsequent_verifications_needed_isValid = false;

    m_allow_refunds_isSet = false;
    m_allow_refunds_isValid = false;

    m_download_speed_isSet = false;
    m_download_speed_isValid = false;

    m_upload_speed_isSet = false;
    m_upload_speed_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_vpn_isSet = false;
    m_vpn_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;

    m_disable_isSet = false;
    m_disable_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;
}

void LTHNServiceEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void LTHNServiceEntity::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::lthn::vpm::client::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::lthn::vpm::client::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::lthn::vpm::client::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_cost_isValid = ::lthn::vpm::client::fromJsonValue(cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_first_pre_paid_minutes_isValid = ::lthn::vpm::client::fromJsonValue(first_pre_paid_minutes, json[QString("firstPrePaidMinutes")]);
    m_first_pre_paid_minutes_isSet = !json[QString("firstPrePaidMinutes")].isNull() && m_first_pre_paid_minutes_isValid;

    m_first_verifications_needed_isValid = ::lthn::vpm::client::fromJsonValue(first_verifications_needed, json[QString("firstVerificationsNeeded")]);
    m_first_verifications_needed_isSet = !json[QString("firstVerificationsNeeded")].isNull() && m_first_verifications_needed_isValid;

    m_subsequent_pre_paid_minutes_isValid = ::lthn::vpm::client::fromJsonValue(subsequent_pre_paid_minutes, json[QString("subsequentPrePaidMinutes")]);
    m_subsequent_pre_paid_minutes_isSet = !json[QString("subsequentPrePaidMinutes")].isNull() && m_subsequent_pre_paid_minutes_isValid;

    m_subsequent_verifications_needed_isValid = ::lthn::vpm::client::fromJsonValue(subsequent_verifications_needed, json[QString("subsequentVerificationsNeeded")]);
    m_subsequent_verifications_needed_isSet = !json[QString("subsequentVerificationsNeeded")].isNull() && m_subsequent_verifications_needed_isValid;

    m_allow_refunds_isValid = ::lthn::vpm::client::fromJsonValue(allow_refunds, json[QString("allowRefunds")]);
    m_allow_refunds_isSet = !json[QString("allowRefunds")].isNull() && m_allow_refunds_isValid;

    m_download_speed_isValid = ::lthn::vpm::client::fromJsonValue(download_speed, json[QString("downloadSpeed")]);
    m_download_speed_isSet = !json[QString("downloadSpeed")].isNull() && m_download_speed_isValid;

    m_upload_speed_isValid = ::lthn::vpm::client::fromJsonValue(upload_speed, json[QString("uploadSpeed")]);
    m_upload_speed_isSet = !json[QString("uploadSpeed")].isNull() && m_upload_speed_isValid;

    m_proxy_isValid = ::lthn::vpm::client::fromJsonValue(proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_vpn_isValid = ::lthn::vpm::client::fromJsonValue(vpn, json[QString("vpn")]);
    m_vpn_isSet = !json[QString("vpn")].isNull() && m_vpn_isValid;

    m_validity_isValid = ::lthn::vpm::client::fromJsonValue(validity, json[QString("validity")]);
    m_validity_isSet = !json[QString("validity")].isNull() && m_validity_isValid;

    m_disable_isValid = ::lthn::vpm::client::fromJsonValue(disable, json[QString("disable")]);
    m_disable_isSet = !json[QString("disable")].isNull() && m_disable_isValid;

    m_certificates_isValid = ::lthn::vpm::client::fromJsonValue(certificates, json[QString("certificates")]);
    m_certificates_isSet = !json[QString("certificates")].isNull() && m_certificates_isValid;
}

QString LTHNServiceEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject LTHNServiceEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::lthn::vpm::client::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::lthn::vpm::client::toJsonValue(name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::lthn::vpm::client::toJsonValue(type));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::lthn::vpm::client::toJsonValue(cost));
    }
    if (m_first_pre_paid_minutes_isSet) {
        obj.insert(QString("firstPrePaidMinutes"), ::lthn::vpm::client::toJsonValue(first_pre_paid_minutes));
    }
    if (m_first_verifications_needed_isSet) {
        obj.insert(QString("firstVerificationsNeeded"), ::lthn::vpm::client::toJsonValue(first_verifications_needed));
    }
    if (m_subsequent_pre_paid_minutes_isSet) {
        obj.insert(QString("subsequentPrePaidMinutes"), ::lthn::vpm::client::toJsonValue(subsequent_pre_paid_minutes));
    }
    if (m_subsequent_verifications_needed_isSet) {
        obj.insert(QString("subsequentVerificationsNeeded"), ::lthn::vpm::client::toJsonValue(subsequent_verifications_needed));
    }
    if (m_allow_refunds_isSet) {
        obj.insert(QString("allowRefunds"), ::lthn::vpm::client::toJsonValue(allow_refunds));
    }
    if (m_download_speed_isSet) {
        obj.insert(QString("downloadSpeed"), ::lthn::vpm::client::toJsonValue(download_speed));
    }
    if (m_upload_speed_isSet) {
        obj.insert(QString("uploadSpeed"), ::lthn::vpm::client::toJsonValue(upload_speed));
    }
    if (proxy.size() > 0) {
        obj.insert(QString("proxy"), ::lthn::vpm::client::toJsonValue(proxy));
    }
    if (vpn.size() > 0) {
        obj.insert(QString("vpn"), ::lthn::vpm::client::toJsonValue(vpn));
    }
    if (validity.isSet()) {
        obj.insert(QString("validity"), ::lthn::vpm::client::toJsonValue(validity));
    }
    if (m_disable_isSet) {
        obj.insert(QString("disable"), ::lthn::vpm::client::toJsonValue(disable));
    }
    if (certificates.size() > 0) {
        obj.insert(QString("certificates"), ::lthn::vpm::client::toJsonValue(certificates));
    }
    return obj;
}

QString LTHNServiceEntity::getId() const {
    return id;
}
void LTHNServiceEntity::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool LTHNServiceEntity::is_id_Set() const{
    return m_id_isSet;
}

bool LTHNServiceEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString LTHNServiceEntity::getName() const {
    return name;
}
void LTHNServiceEntity::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool LTHNServiceEntity::is_name_Set() const{
    return m_name_isSet;
}

bool LTHNServiceEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString LTHNServiceEntity::getType() const {
    return type;
}
void LTHNServiceEntity::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool LTHNServiceEntity::is_type_Set() const{
    return m_type_isSet;
}

bool LTHNServiceEntity::is_type_Valid() const{
    return m_type_isValid;
}

QString LTHNServiceEntity::getCost() const {
    return cost;
}
void LTHNServiceEntity::setCost(const QString &cost) {
    this->cost = cost;
    this->m_cost_isSet = true;
}

bool LTHNServiceEntity::is_cost_Set() const{
    return m_cost_isSet;
}

bool LTHNServiceEntity::is_cost_Valid() const{
    return m_cost_isValid;
}

double LTHNServiceEntity::getFirstPrePaidMinutes() const {
    return first_pre_paid_minutes;
}
void LTHNServiceEntity::setFirstPrePaidMinutes(const double &first_pre_paid_minutes) {
    this->first_pre_paid_minutes = first_pre_paid_minutes;
    this->m_first_pre_paid_minutes_isSet = true;
}

bool LTHNServiceEntity::is_first_pre_paid_minutes_Set() const{
    return m_first_pre_paid_minutes_isSet;
}

bool LTHNServiceEntity::is_first_pre_paid_minutes_Valid() const{
    return m_first_pre_paid_minutes_isValid;
}

double LTHNServiceEntity::getFirstVerificationsNeeded() const {
    return first_verifications_needed;
}
void LTHNServiceEntity::setFirstVerificationsNeeded(const double &first_verifications_needed) {
    this->first_verifications_needed = first_verifications_needed;
    this->m_first_verifications_needed_isSet = true;
}

bool LTHNServiceEntity::is_first_verifications_needed_Set() const{
    return m_first_verifications_needed_isSet;
}

bool LTHNServiceEntity::is_first_verifications_needed_Valid() const{
    return m_first_verifications_needed_isValid;
}

double LTHNServiceEntity::getSubsequentPrePaidMinutes() const {
    return subsequent_pre_paid_minutes;
}
void LTHNServiceEntity::setSubsequentPrePaidMinutes(const double &subsequent_pre_paid_minutes) {
    this->subsequent_pre_paid_minutes = subsequent_pre_paid_minutes;
    this->m_subsequent_pre_paid_minutes_isSet = true;
}

bool LTHNServiceEntity::is_subsequent_pre_paid_minutes_Set() const{
    return m_subsequent_pre_paid_minutes_isSet;
}

bool LTHNServiceEntity::is_subsequent_pre_paid_minutes_Valid() const{
    return m_subsequent_pre_paid_minutes_isValid;
}

double LTHNServiceEntity::getSubsequentVerificationsNeeded() const {
    return subsequent_verifications_needed;
}
void LTHNServiceEntity::setSubsequentVerificationsNeeded(const double &subsequent_verifications_needed) {
    this->subsequent_verifications_needed = subsequent_verifications_needed;
    this->m_subsequent_verifications_needed_isSet = true;
}

bool LTHNServiceEntity::is_subsequent_verifications_needed_Set() const{
    return m_subsequent_verifications_needed_isSet;
}

bool LTHNServiceEntity::is_subsequent_verifications_needed_Valid() const{
    return m_subsequent_verifications_needed_isValid;
}

bool LTHNServiceEntity::isAllowRefunds() const {
    return allow_refunds;
}
void LTHNServiceEntity::setAllowRefunds(const bool &allow_refunds) {
    this->allow_refunds = allow_refunds;
    this->m_allow_refunds_isSet = true;
}

bool LTHNServiceEntity::is_allow_refunds_Set() const{
    return m_allow_refunds_isSet;
}

bool LTHNServiceEntity::is_allow_refunds_Valid() const{
    return m_allow_refunds_isValid;
}

double LTHNServiceEntity::getDownloadSpeed() const {
    return download_speed;
}
void LTHNServiceEntity::setDownloadSpeed(const double &download_speed) {
    this->download_speed = download_speed;
    this->m_download_speed_isSet = true;
}

bool LTHNServiceEntity::is_download_speed_Set() const{
    return m_download_speed_isSet;
}

bool LTHNServiceEntity::is_download_speed_Valid() const{
    return m_download_speed_isValid;
}

double LTHNServiceEntity::getUploadSpeed() const {
    return upload_speed;
}
void LTHNServiceEntity::setUploadSpeed(const double &upload_speed) {
    this->upload_speed = upload_speed;
    this->m_upload_speed_isSet = true;
}

bool LTHNServiceEntity::is_upload_speed_Set() const{
    return m_upload_speed_isSet;
}

bool LTHNServiceEntity::is_upload_speed_Valid() const{
    return m_upload_speed_isValid;
}

QList<LTHNProxySettingsEntity> LTHNServiceEntity::getProxy() const {
    return proxy;
}
void LTHNServiceEntity::setProxy(const QList<LTHNProxySettingsEntity> &proxy) {
    this->proxy = proxy;
    this->m_proxy_isSet = true;
}

bool LTHNServiceEntity::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool LTHNServiceEntity::is_proxy_Valid() const{
    return m_proxy_isValid;
}

QList<LTHNVpnSettingsEntity> LTHNServiceEntity::getVpn() const {
    return vpn;
}
void LTHNServiceEntity::setVpn(const QList<LTHNVpnSettingsEntity> &vpn) {
    this->vpn = vpn;
    this->m_vpn_isSet = true;
}

bool LTHNServiceEntity::is_vpn_Set() const{
    return m_vpn_isSet;
}

bool LTHNServiceEntity::is_vpn_Valid() const{
    return m_vpn_isValid;
}

LTHNTimeRangeEntity LTHNServiceEntity::getValidity() const {
    return validity;
}
void LTHNServiceEntity::setValidity(const LTHNTimeRangeEntity &validity) {
    this->validity = validity;
    this->m_validity_isSet = true;
}

bool LTHNServiceEntity::is_validity_Set() const{
    return m_validity_isSet;
}

bool LTHNServiceEntity::is_validity_Valid() const{
    return m_validity_isValid;
}

bool LTHNServiceEntity::isDisable() const {
    return disable;
}
void LTHNServiceEntity::setDisable(const bool &disable) {
    this->disable = disable;
    this->m_disable_isSet = true;
}

bool LTHNServiceEntity::is_disable_Set() const{
    return m_disable_isSet;
}

bool LTHNServiceEntity::is_disable_Valid() const{
    return m_disable_isValid;
}

QList<LTHNCertificatesEntity> LTHNServiceEntity::getCertificates() const {
    return certificates;
}
void LTHNServiceEntity::setCertificates(const QList<LTHNCertificatesEntity> &certificates) {
    this->certificates = certificates;
    this->m_certificates_isSet = true;
}

bool LTHNServiceEntity::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool LTHNServiceEntity::is_certificates_Valid() const{
    return m_certificates_isValid;
}

bool LTHNServiceEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_pre_paid_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_verifications_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsequent_pre_paid_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsequent_verifications_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (proxy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (vpn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (validity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool LTHNServiceEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_cost_isValid && m_download_speed_isValid && m_upload_speed_isValid && m_disable_isValid && true;
}

} // namespace lthn
} // namespace vpm
} // namespace client
