=begin
#Lethean VPN Api

#Distributed Virtual Private Marketplace

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ServiceEntity
    # ID of the service
    attr_accessor :id

    # Name of the service
    attr_accessor :name

    # Type of the service
    attr_accessor :type

    # Per minute Cost of the service
    attr_accessor :cost

    # Amount of pre-paid minutes for first payment
    attr_accessor :first_pre_paid_minutes

    # Number of verifications needed for first payment
    attr_accessor :first_verifications_needed

    # Amount of pre-paid minutes for subsequent payments
    attr_accessor :subsequent_pre_paid_minutes

    # Number of verifications needed for subsequent payments
    attr_accessor :subsequent_verifications_needed

    # Whether or not refunds are allowed
    attr_accessor :allow_refunds

    # Service download speed in Mbits
    attr_accessor :download_speed

    # Service upload speed in Mbits
    attr_accessor :upload_speed

    # array containing Proxy related settings. only available if service is of type proxy, null otherwise
    attr_accessor :proxy

    # array containing VPN related settings. only available if service is of type vpn, null otherwise
    attr_accessor :vpn

    attr_accessor :validity

    # disable or not the service
    attr_accessor :disable

    # inside each service, there should be a field named certificates that has a list of IDs, referencing the certificates at the provider level.
    attr_accessor :certificates

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'type' => :'type',
        :'cost' => :'cost',
        :'first_pre_paid_minutes' => :'firstPrePaidMinutes',
        :'first_verifications_needed' => :'firstVerificationsNeeded',
        :'subsequent_pre_paid_minutes' => :'subsequentPrePaidMinutes',
        :'subsequent_verifications_needed' => :'subsequentVerificationsNeeded',
        :'allow_refunds' => :'allowRefunds',
        :'download_speed' => :'downloadSpeed',
        :'upload_speed' => :'uploadSpeed',
        :'proxy' => :'proxy',
        :'vpn' => :'vpn',
        :'validity' => :'validity',
        :'disable' => :'disable',
        :'certificates' => :'certificates'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'type' => :'String',
        :'cost' => :'String',
        :'first_pre_paid_minutes' => :'Float',
        :'first_verifications_needed' => :'Float',
        :'subsequent_pre_paid_minutes' => :'Float',
        :'subsequent_verifications_needed' => :'Float',
        :'allow_refunds' => :'Boolean',
        :'download_speed' => :'Float',
        :'upload_speed' => :'Float',
        :'proxy' => :'Array<ProxySettingsEntity>',
        :'vpn' => :'Array<VpnSettingsEntity>',
        :'validity' => :'TimeRangeEntity',
        :'disable' => :'Boolean',
        :'certificates' => :'Array<CertificatesEntity>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ServiceEntity` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ServiceEntity`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'first_pre_paid_minutes')
        self.first_pre_paid_minutes = attributes[:'first_pre_paid_minutes']
      end

      if attributes.key?(:'first_verifications_needed')
        self.first_verifications_needed = attributes[:'first_verifications_needed']
      end

      if attributes.key?(:'subsequent_pre_paid_minutes')
        self.subsequent_pre_paid_minutes = attributes[:'subsequent_pre_paid_minutes']
      end

      if attributes.key?(:'subsequent_verifications_needed')
        self.subsequent_verifications_needed = attributes[:'subsequent_verifications_needed']
      end

      if attributes.key?(:'allow_refunds')
        self.allow_refunds = attributes[:'allow_refunds']
      end

      if attributes.key?(:'download_speed')
        self.download_speed = attributes[:'download_speed']
      end

      if attributes.key?(:'upload_speed')
        self.upload_speed = attributes[:'upload_speed']
      end

      if attributes.key?(:'proxy')
        if (value = attributes[:'proxy']).is_a?(Array)
          self.proxy = value
        end
      end

      if attributes.key?(:'vpn')
        if (value = attributes[:'vpn']).is_a?(Array)
          self.vpn = value
        end
      end

      if attributes.key?(:'validity')
        self.validity = attributes[:'validity']
      end

      if attributes.key?(:'disable')
        self.disable = attributes[:'disable']
      end

      if attributes.key?(:'certificates')
        if (value = attributes[:'certificates']).is_a?(Array)
          self.certificates = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id.to_s.length > 2
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 2.')
      end

      if @id.to_s.length < 2
        invalid_properties.push('invalid value for "id", the character length must be great than or equal to 2.')
      end

      pattern = Regexp.new(/[0-9A-F]{1}[0-9A-F]{1}/)
      if @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 32
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 32.')
      end

      pattern = Regexp.new(/^[a-zA-Z0-9 ,.-_]+$/)
      if @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @cost.nil?
        invalid_properties.push('invalid value for "cost", cost cannot be nil.')
      end

      if @cost.to_s.length > 14
        invalid_properties.push('invalid value for "cost", the character length must be smaller than or equal to 14.')
      end

      pattern = Regexp.new(/([0-9]{1,5}|[.]{1}[0-9]{1,8})/)
      if @cost !~ pattern
        invalid_properties.push("invalid value for \"cost\", must conform to the pattern #{pattern}.")
      end

      if !@first_pre_paid_minutes.nil? && @first_pre_paid_minutes > 1440
        invalid_properties.push('invalid value for "first_pre_paid_minutes", must be smaller than or equal to 1440.')
      end

      if !@first_pre_paid_minutes.nil? && @first_pre_paid_minutes < 10
        invalid_properties.push('invalid value for "first_pre_paid_minutes", must be greater than or equal to 10.')
      end

      if !@first_verifications_needed.nil? && @first_verifications_needed > 2
        invalid_properties.push('invalid value for "first_verifications_needed", must be smaller than or equal to 2.')
      end

      if !@first_verifications_needed.nil? && @first_verifications_needed < 0
        invalid_properties.push('invalid value for "first_verifications_needed", must be greater than or equal to 0.')
      end

      if !@subsequent_pre_paid_minutes.nil? && @subsequent_pre_paid_minutes > 1440
        invalid_properties.push('invalid value for "subsequent_pre_paid_minutes", must be smaller than or equal to 1440.')
      end

      if !@subsequent_pre_paid_minutes.nil? && @subsequent_pre_paid_minutes < 10
        invalid_properties.push('invalid value for "subsequent_pre_paid_minutes", must be greater than or equal to 10.')
      end

      if !@subsequent_verifications_needed.nil? && @subsequent_verifications_needed > 1
        invalid_properties.push('invalid value for "subsequent_verifications_needed", must be smaller than or equal to 1.')
      end

      if !@subsequent_verifications_needed.nil? && @subsequent_verifications_needed < 0
        invalid_properties.push('invalid value for "subsequent_verifications_needed", must be greater than or equal to 0.')
      end

      if @download_speed.nil?
        invalid_properties.push('invalid value for "download_speed", download_speed cannot be nil.')
      end

      if @download_speed > 99999999999
        invalid_properties.push('invalid value for "download_speed", must be smaller than or equal to 99999999999.')
      end

      if @download_speed < 0
        invalid_properties.push('invalid value for "download_speed", must be greater than or equal to 0.')
      end

      if @upload_speed.nil?
        invalid_properties.push('invalid value for "upload_speed", upload_speed cannot be nil.')
      end

      if @upload_speed > 99999999999
        invalid_properties.push('invalid value for "upload_speed", must be smaller than or equal to 99999999999.')
      end

      if @upload_speed < 0
        invalid_properties.push('invalid value for "upload_speed", must be greater than or equal to 0.')
      end

      if @disable.nil?
        invalid_properties.push('invalid value for "disable", disable cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @id.to_s.length > 2
      return false if @id.to_s.length < 2
      return false if @id !~ Regexp.new(/[0-9A-F]{1}[0-9A-F]{1}/)
      return false if @name.nil?
      return false if @name.to_s.length > 32
      return false if @name !~ Regexp.new(/^[a-zA-Z0-9 ,.-_]+$/)
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["vpn", "proxy"])
      return false unless type_validator.valid?(@type)
      return false if @cost.nil?
      return false if @cost.to_s.length > 14
      return false if @cost !~ Regexp.new(/([0-9]{1,5}|[.]{1}[0-9]{1,8})/)
      return false if !@first_pre_paid_minutes.nil? && @first_pre_paid_minutes > 1440
      return false if !@first_pre_paid_minutes.nil? && @first_pre_paid_minutes < 10
      return false if !@first_verifications_needed.nil? && @first_verifications_needed > 2
      return false if !@first_verifications_needed.nil? && @first_verifications_needed < 0
      return false if !@subsequent_pre_paid_minutes.nil? && @subsequent_pre_paid_minutes > 1440
      return false if !@subsequent_pre_paid_minutes.nil? && @subsequent_pre_paid_minutes < 10
      return false if !@subsequent_verifications_needed.nil? && @subsequent_verifications_needed > 1
      return false if !@subsequent_verifications_needed.nil? && @subsequent_verifications_needed < 0
      return false if @download_speed.nil?
      return false if @download_speed > 99999999999
      return false if @download_speed < 0
      return false if @upload_speed.nil?
      return false if @upload_speed > 99999999999
      return false if @upload_speed < 0
      return false if @disable.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id.to_s.length > 2
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 2.'
      end

      if id.to_s.length < 2
        fail ArgumentError, 'invalid value for "id", the character length must be great than or equal to 2.'
      end

      pattern = Regexp.new(/[0-9A-F]{1}[0-9A-F]{1}/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 32
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 32.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9 ,.-_]+$/)
      if name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["vpn", "proxy"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] cost Value to be assigned
    def cost=(cost)
      if cost.nil?
        fail ArgumentError, 'cost cannot be nil'
      end

      if cost.to_s.length > 14
        fail ArgumentError, 'invalid value for "cost", the character length must be smaller than or equal to 14.'
      end

      pattern = Regexp.new(/([0-9]{1,5}|[.]{1}[0-9]{1,8})/)
      if cost !~ pattern
        fail ArgumentError, "invalid value for \"cost\", must conform to the pattern #{pattern}."
      end

      @cost = cost
    end

    # Custom attribute writer method with validation
    # @param [Object] first_pre_paid_minutes Value to be assigned
    def first_pre_paid_minutes=(first_pre_paid_minutes)
      if !first_pre_paid_minutes.nil? && first_pre_paid_minutes > 1440
        fail ArgumentError, 'invalid value for "first_pre_paid_minutes", must be smaller than or equal to 1440.'
      end

      if !first_pre_paid_minutes.nil? && first_pre_paid_minutes < 10
        fail ArgumentError, 'invalid value for "first_pre_paid_minutes", must be greater than or equal to 10.'
      end

      @first_pre_paid_minutes = first_pre_paid_minutes
    end

    # Custom attribute writer method with validation
    # @param [Object] first_verifications_needed Value to be assigned
    def first_verifications_needed=(first_verifications_needed)
      if !first_verifications_needed.nil? && first_verifications_needed > 2
        fail ArgumentError, 'invalid value for "first_verifications_needed", must be smaller than or equal to 2.'
      end

      if !first_verifications_needed.nil? && first_verifications_needed < 0
        fail ArgumentError, 'invalid value for "first_verifications_needed", must be greater than or equal to 0.'
      end

      @first_verifications_needed = first_verifications_needed
    end

    # Custom attribute writer method with validation
    # @param [Object] subsequent_pre_paid_minutes Value to be assigned
    def subsequent_pre_paid_minutes=(subsequent_pre_paid_minutes)
      if !subsequent_pre_paid_minutes.nil? && subsequent_pre_paid_minutes > 1440
        fail ArgumentError, 'invalid value for "subsequent_pre_paid_minutes", must be smaller than or equal to 1440.'
      end

      if !subsequent_pre_paid_minutes.nil? && subsequent_pre_paid_minutes < 10
        fail ArgumentError, 'invalid value for "subsequent_pre_paid_minutes", must be greater than or equal to 10.'
      end

      @subsequent_pre_paid_minutes = subsequent_pre_paid_minutes
    end

    # Custom attribute writer method with validation
    # @param [Object] subsequent_verifications_needed Value to be assigned
    def subsequent_verifications_needed=(subsequent_verifications_needed)
      if !subsequent_verifications_needed.nil? && subsequent_verifications_needed > 1
        fail ArgumentError, 'invalid value for "subsequent_verifications_needed", must be smaller than or equal to 1.'
      end

      if !subsequent_verifications_needed.nil? && subsequent_verifications_needed < 0
        fail ArgumentError, 'invalid value for "subsequent_verifications_needed", must be greater than or equal to 0.'
      end

      @subsequent_verifications_needed = subsequent_verifications_needed
    end

    # Custom attribute writer method with validation
    # @param [Object] download_speed Value to be assigned
    def download_speed=(download_speed)
      if download_speed.nil?
        fail ArgumentError, 'download_speed cannot be nil'
      end

      if download_speed > 99999999999
        fail ArgumentError, 'invalid value for "download_speed", must be smaller than or equal to 99999999999.'
      end

      if download_speed < 0
        fail ArgumentError, 'invalid value for "download_speed", must be greater than or equal to 0.'
      end

      @download_speed = download_speed
    end

    # Custom attribute writer method with validation
    # @param [Object] upload_speed Value to be assigned
    def upload_speed=(upload_speed)
      if upload_speed.nil?
        fail ArgumentError, 'upload_speed cannot be nil'
      end

      if upload_speed > 99999999999
        fail ArgumentError, 'invalid value for "upload_speed", must be smaller than or equal to 99999999999.'
      end

      if upload_speed < 0
        fail ArgumentError, 'invalid value for "upload_speed", must be greater than or equal to 0.'
      end

      @upload_speed = upload_speed
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          type == o.type &&
          cost == o.cost &&
          first_pre_paid_minutes == o.first_pre_paid_minutes &&
          first_verifications_needed == o.first_verifications_needed &&
          subsequent_pre_paid_minutes == o.subsequent_pre_paid_minutes &&
          subsequent_verifications_needed == o.subsequent_verifications_needed &&
          allow_refunds == o.allow_refunds &&
          download_speed == o.download_speed &&
          upload_speed == o.upload_speed &&
          proxy == o.proxy &&
          vpn == o.vpn &&
          validity == o.validity &&
          disable == o.disable &&
          certificates == o.certificates
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, type, cost, first_pre_paid_minutes, first_verifications_needed, subsequent_pre_paid_minutes, subsequent_verifications_needed, allow_refunds, download_speed, upload_speed, proxy, vpn, validity, disable, certificates].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
