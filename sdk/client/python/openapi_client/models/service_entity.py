# coding: utf-8

"""
    Lethean VPN Api

    Distributed Virtual Private Marketplace  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ServiceEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'cost': 'str',
        'first_pre_paid_minutes': 'float',
        'first_verifications_needed': 'float',
        'subsequent_pre_paid_minutes': 'float',
        'subsequent_verifications_needed': 'float',
        'allow_refunds': 'bool',
        'download_speed': 'float',
        'upload_speed': 'float',
        'proxy': 'list[ProxySettingsEntity]',
        'vpn': 'list[VpnSettingsEntity]',
        'validity': 'TimeRangeEntity',
        'disable': 'bool',
        'certificates': 'list[CertificatesEntity]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'cost': 'cost',
        'first_pre_paid_minutes': 'firstPrePaidMinutes',
        'first_verifications_needed': 'firstVerificationsNeeded',
        'subsequent_pre_paid_minutes': 'subsequentPrePaidMinutes',
        'subsequent_verifications_needed': 'subsequentVerificationsNeeded',
        'allow_refunds': 'allowRefunds',
        'download_speed': 'downloadSpeed',
        'upload_speed': 'uploadSpeed',
        'proxy': 'proxy',
        'vpn': 'vpn',
        'validity': 'validity',
        'disable': 'disable',
        'certificates': 'certificates'
    }

    def __init__(self, id=None, name=None, type=None, cost=None, first_pre_paid_minutes=None, first_verifications_needed=None, subsequent_pre_paid_minutes=None, subsequent_verifications_needed=None, allow_refunds=None, download_speed=None, upload_speed=None, proxy=None, vpn=None, validity=None, disable=None, certificates=None, local_vars_configuration=None):  # noqa: E501
        """ServiceEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._type = None
        self._cost = None
        self._first_pre_paid_minutes = None
        self._first_verifications_needed = None
        self._subsequent_pre_paid_minutes = None
        self._subsequent_verifications_needed = None
        self._allow_refunds = None
        self._download_speed = None
        self._upload_speed = None
        self._proxy = None
        self._vpn = None
        self._validity = None
        self._disable = None
        self._certificates = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.type = type
        self.cost = cost
        if first_pre_paid_minutes is not None:
            self.first_pre_paid_minutes = first_pre_paid_minutes
        if first_verifications_needed is not None:
            self.first_verifications_needed = first_verifications_needed
        if subsequent_pre_paid_minutes is not None:
            self.subsequent_pre_paid_minutes = subsequent_pre_paid_minutes
        if subsequent_verifications_needed is not None:
            self.subsequent_verifications_needed = subsequent_verifications_needed
        if allow_refunds is not None:
            self.allow_refunds = allow_refunds
        self.download_speed = download_speed
        self.upload_speed = upload_speed
        if proxy is not None:
            self.proxy = proxy
        if vpn is not None:
            self.vpn = vpn
        if validity is not None:
            self.validity = validity
        self.disable = disable
        if certificates is not None:
            self.certificates = certificates

    @property
    def id(self):
        """Gets the id of this ServiceEntity.  # noqa: E501

        ID of the service  # noqa: E501

        :return: The id of this ServiceEntity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceEntity.

        ID of the service  # noqa: E501

        :param id: The id of this ServiceEntity.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 2):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 2):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and not re.search(r'[0-9A-F]{1}[0-9A-F]{1}', id)):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/[0-9A-F]{1}[0-9A-F]{1}/`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceEntity.  # noqa: E501

        Name of the service  # noqa: E501

        :return: The name of this ServiceEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceEntity.

        Name of the service  # noqa: E501

        :param name: The name of this ServiceEntity.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 32):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[a-zA-Z0-9 ,.-_]+$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9 ,.-_]+$/`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this ServiceEntity.  # noqa: E501

        Type of the service  # noqa: E501

        :return: The type of this ServiceEntity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceEntity.

        Type of the service  # noqa: E501

        :param type: The type of this ServiceEntity.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["vpn", "proxy"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def cost(self):
        """Gets the cost of this ServiceEntity.  # noqa: E501

        Per minute Cost of the service  # noqa: E501

        :return: The cost of this ServiceEntity.  # noqa: E501
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ServiceEntity.

        Per minute Cost of the service  # noqa: E501

        :param cost: The cost of this ServiceEntity.  # noqa: E501
        :type cost: str
        """
        if self.local_vars_configuration.client_side_validation and cost is None:  # noqa: E501
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost is not None and len(cost) > 14):
            raise ValueError("Invalid value for `cost`, length must be less than or equal to `14`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost is not None and not re.search(r'([0-9]{1,5}|[.]{1}[0-9]{1,8})', cost)):  # noqa: E501
            raise ValueError(r"Invalid value for `cost`, must be a follow pattern or equal to `/([0-9]{1,5}|[.]{1}[0-9]{1,8})/`")  # noqa: E501

        self._cost = cost

    @property
    def first_pre_paid_minutes(self):
        """Gets the first_pre_paid_minutes of this ServiceEntity.  # noqa: E501

        Amount of pre-paid minutes for first payment  # noqa: E501

        :return: The first_pre_paid_minutes of this ServiceEntity.  # noqa: E501
        :rtype: float
        """
        return self._first_pre_paid_minutes

    @first_pre_paid_minutes.setter
    def first_pre_paid_minutes(self, first_pre_paid_minutes):
        """Sets the first_pre_paid_minutes of this ServiceEntity.

        Amount of pre-paid minutes for first payment  # noqa: E501

        :param first_pre_paid_minutes: The first_pre_paid_minutes of this ServiceEntity.  # noqa: E501
        :type first_pre_paid_minutes: float
        """
        if (self.local_vars_configuration.client_side_validation and
                first_pre_paid_minutes is not None and first_pre_paid_minutes > 1440):  # noqa: E501
            raise ValueError("Invalid value for `first_pre_paid_minutes`, must be a value less than or equal to `1440`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                first_pre_paid_minutes is not None and first_pre_paid_minutes < 10):  # noqa: E501
            raise ValueError("Invalid value for `first_pre_paid_minutes`, must be a value greater than or equal to `10`")  # noqa: E501

        self._first_pre_paid_minutes = first_pre_paid_minutes

    @property
    def first_verifications_needed(self):
        """Gets the first_verifications_needed of this ServiceEntity.  # noqa: E501

        Number of verifications needed for first payment  # noqa: E501

        :return: The first_verifications_needed of this ServiceEntity.  # noqa: E501
        :rtype: float
        """
        return self._first_verifications_needed

    @first_verifications_needed.setter
    def first_verifications_needed(self, first_verifications_needed):
        """Sets the first_verifications_needed of this ServiceEntity.

        Number of verifications needed for first payment  # noqa: E501

        :param first_verifications_needed: The first_verifications_needed of this ServiceEntity.  # noqa: E501
        :type first_verifications_needed: float
        """
        if (self.local_vars_configuration.client_side_validation and
                first_verifications_needed is not None and first_verifications_needed > 2):  # noqa: E501
            raise ValueError("Invalid value for `first_verifications_needed`, must be a value less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                first_verifications_needed is not None and first_verifications_needed < 0):  # noqa: E501
            raise ValueError("Invalid value for `first_verifications_needed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._first_verifications_needed = first_verifications_needed

    @property
    def subsequent_pre_paid_minutes(self):
        """Gets the subsequent_pre_paid_minutes of this ServiceEntity.  # noqa: E501

        Amount of pre-paid minutes for subsequent payments  # noqa: E501

        :return: The subsequent_pre_paid_minutes of this ServiceEntity.  # noqa: E501
        :rtype: float
        """
        return self._subsequent_pre_paid_minutes

    @subsequent_pre_paid_minutes.setter
    def subsequent_pre_paid_minutes(self, subsequent_pre_paid_minutes):
        """Sets the subsequent_pre_paid_minutes of this ServiceEntity.

        Amount of pre-paid minutes for subsequent payments  # noqa: E501

        :param subsequent_pre_paid_minutes: The subsequent_pre_paid_minutes of this ServiceEntity.  # noqa: E501
        :type subsequent_pre_paid_minutes: float
        """
        if (self.local_vars_configuration.client_side_validation and
                subsequent_pre_paid_minutes is not None and subsequent_pre_paid_minutes > 1440):  # noqa: E501
            raise ValueError("Invalid value for `subsequent_pre_paid_minutes`, must be a value less than or equal to `1440`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                subsequent_pre_paid_minutes is not None and subsequent_pre_paid_minutes < 10):  # noqa: E501
            raise ValueError("Invalid value for `subsequent_pre_paid_minutes`, must be a value greater than or equal to `10`")  # noqa: E501

        self._subsequent_pre_paid_minutes = subsequent_pre_paid_minutes

    @property
    def subsequent_verifications_needed(self):
        """Gets the subsequent_verifications_needed of this ServiceEntity.  # noqa: E501

        Number of verifications needed for subsequent payments  # noqa: E501

        :return: The subsequent_verifications_needed of this ServiceEntity.  # noqa: E501
        :rtype: float
        """
        return self._subsequent_verifications_needed

    @subsequent_verifications_needed.setter
    def subsequent_verifications_needed(self, subsequent_verifications_needed):
        """Sets the subsequent_verifications_needed of this ServiceEntity.

        Number of verifications needed for subsequent payments  # noqa: E501

        :param subsequent_verifications_needed: The subsequent_verifications_needed of this ServiceEntity.  # noqa: E501
        :type subsequent_verifications_needed: float
        """
        if (self.local_vars_configuration.client_side_validation and
                subsequent_verifications_needed is not None and subsequent_verifications_needed > 1):  # noqa: E501
            raise ValueError("Invalid value for `subsequent_verifications_needed`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                subsequent_verifications_needed is not None and subsequent_verifications_needed < 0):  # noqa: E501
            raise ValueError("Invalid value for `subsequent_verifications_needed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._subsequent_verifications_needed = subsequent_verifications_needed

    @property
    def allow_refunds(self):
        """Gets the allow_refunds of this ServiceEntity.  # noqa: E501

        Whether or not refunds are allowed  # noqa: E501

        :return: The allow_refunds of this ServiceEntity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_refunds

    @allow_refunds.setter
    def allow_refunds(self, allow_refunds):
        """Sets the allow_refunds of this ServiceEntity.

        Whether or not refunds are allowed  # noqa: E501

        :param allow_refunds: The allow_refunds of this ServiceEntity.  # noqa: E501
        :type allow_refunds: bool
        """

        self._allow_refunds = allow_refunds

    @property
    def download_speed(self):
        """Gets the download_speed of this ServiceEntity.  # noqa: E501

        Service download speed in Mbits  # noqa: E501

        :return: The download_speed of this ServiceEntity.  # noqa: E501
        :rtype: float
        """
        return self._download_speed

    @download_speed.setter
    def download_speed(self, download_speed):
        """Sets the download_speed of this ServiceEntity.

        Service download speed in Mbits  # noqa: E501

        :param download_speed: The download_speed of this ServiceEntity.  # noqa: E501
        :type download_speed: float
        """
        if self.local_vars_configuration.client_side_validation and download_speed is None:  # noqa: E501
            raise ValueError("Invalid value for `download_speed`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                download_speed is not None and download_speed > 99999999999):  # noqa: E501
            raise ValueError("Invalid value for `download_speed`, must be a value less than or equal to `99999999999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                download_speed is not None and download_speed < 0):  # noqa: E501
            raise ValueError("Invalid value for `download_speed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._download_speed = download_speed

    @property
    def upload_speed(self):
        """Gets the upload_speed of this ServiceEntity.  # noqa: E501

        Service upload speed in Mbits  # noqa: E501

        :return: The upload_speed of this ServiceEntity.  # noqa: E501
        :rtype: float
        """
        return self._upload_speed

    @upload_speed.setter
    def upload_speed(self, upload_speed):
        """Sets the upload_speed of this ServiceEntity.

        Service upload speed in Mbits  # noqa: E501

        :param upload_speed: The upload_speed of this ServiceEntity.  # noqa: E501
        :type upload_speed: float
        """
        if self.local_vars_configuration.client_side_validation and upload_speed is None:  # noqa: E501
            raise ValueError("Invalid value for `upload_speed`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                upload_speed is not None and upload_speed > 99999999999):  # noqa: E501
            raise ValueError("Invalid value for `upload_speed`, must be a value less than or equal to `99999999999`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                upload_speed is not None and upload_speed < 0):  # noqa: E501
            raise ValueError("Invalid value for `upload_speed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._upload_speed = upload_speed

    @property
    def proxy(self):
        """Gets the proxy of this ServiceEntity.  # noqa: E501

        array containing Proxy related settings. only available if service is of type proxy, null otherwise  # noqa: E501

        :return: The proxy of this ServiceEntity.  # noqa: E501
        :rtype: list[ProxySettingsEntity]
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this ServiceEntity.

        array containing Proxy related settings. only available if service is of type proxy, null otherwise  # noqa: E501

        :param proxy: The proxy of this ServiceEntity.  # noqa: E501
        :type proxy: list[ProxySettingsEntity]
        """

        self._proxy = proxy

    @property
    def vpn(self):
        """Gets the vpn of this ServiceEntity.  # noqa: E501

        array containing VPN related settings. only available if service is of type vpn, null otherwise  # noqa: E501

        :return: The vpn of this ServiceEntity.  # noqa: E501
        :rtype: list[VpnSettingsEntity]
        """
        return self._vpn

    @vpn.setter
    def vpn(self, vpn):
        """Sets the vpn of this ServiceEntity.

        array containing VPN related settings. only available if service is of type vpn, null otherwise  # noqa: E501

        :param vpn: The vpn of this ServiceEntity.  # noqa: E501
        :type vpn: list[VpnSettingsEntity]
        """

        self._vpn = vpn

    @property
    def validity(self):
        """Gets the validity of this ServiceEntity.  # noqa: E501


        :return: The validity of this ServiceEntity.  # noqa: E501
        :rtype: TimeRangeEntity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this ServiceEntity.


        :param validity: The validity of this ServiceEntity.  # noqa: E501
        :type validity: TimeRangeEntity
        """

        self._validity = validity

    @property
    def disable(self):
        """Gets the disable of this ServiceEntity.  # noqa: E501

        disable or not the service  # noqa: E501

        :return: The disable of this ServiceEntity.  # noqa: E501
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this ServiceEntity.

        disable or not the service  # noqa: E501

        :param disable: The disable of this ServiceEntity.  # noqa: E501
        :type disable: bool
        """
        if self.local_vars_configuration.client_side_validation and disable is None:  # noqa: E501
            raise ValueError("Invalid value for `disable`, must not be `None`")  # noqa: E501

        self._disable = disable

    @property
    def certificates(self):
        """Gets the certificates of this ServiceEntity.  # noqa: E501

        inside each service, there should be a field named certificates that has a list of IDs, referencing the certificates at the provider level.  # noqa: E501

        :return: The certificates of this ServiceEntity.  # noqa: E501
        :rtype: list[CertificatesEntity]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this ServiceEntity.

        inside each service, there should be a field named certificates that has a list of IDs, referencing the certificates at the provider level.  # noqa: E501

        :param certificates: The certificates of this ServiceEntity.  # noqa: E501
        :type certificates: list[CertificatesEntity]
        """

        self._certificates = certificates

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceEntity):
            return True

        return self.to_dict() != other.to_dict()
