# coding: utf-8

"""
    Lethean VPN Api

    Distributed Virtual Private Marketplace  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.service_entity import ServiceEntity  # noqa: E501
from openapi_client.rest import ApiException

class TestServiceEntity(unittest.TestCase):
    """ServiceEntity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ServiceEntity
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.service_entity.ServiceEntity()  # noqa: E501
        if include_optional :
            return ServiceEntity(
                id = 'BF01', 
                name = 'e', 
                type = 'vpn', 
                cost = '.07', 
                first_pre_paid_minutes = 10, 
                first_verifications_needed = 0, 
                subsequent_pre_paid_minutes = 10, 
                subsequent_verifications_needed = 0, 
                allow_refunds = True, 
                download_speed = 0, 
                upload_speed = 0, 
                proxy = [
                    openapi_client.models.proxy_settings_entity.ProxySettingsEntity(
                        endpoint = 'ssssssssssssssssssssssssssssR,rZ#UM/?R,Fp^l6$ARjbhJk C>i H'qT\\{<?'es#)#iK.YM{Rag2/!KB!k@5oXh.:Ts\";mGL,i&z5[P@M\"lzfB+Y,Twzfu~N^z\"mfqecVU{SmA{QA<Y8XX0<}J;Krm9W'g~?)DvDDLE7-'(u+-7Tfp&\\`F+7-?{%@=iEPLVY*a@A[b_6cfy~~0GcD_@b4Y=U?otJ(e#=I@b(lK%|5-Ido{f(x#mYtedHbSAWry*4g\\u6+|1Y=xW6>DW&&m ?I)IYQ&\\[?p=P.ec~^LC\\~$<5#|HB*o%:|!Szv.~L*?@&6v+UXGg0x3|5:,#c2\"e&x J'k[k<E>5;m1]zh\"dHt9QeHSTLY---Q6--m---2d-FH--kC---r-DP-ORPx/Xsssssssssssssssssssssssssssssssssssssssssssssssssssss', 
                        port = '64807/TCp', 
                        terms = 'n', 
                        policy = [
                            ''
                            ], )
                    ], 
                vpn = [
                    openapi_client.models.vpn_settings_entity.VpnSettingsEntity(
                        endpoint = 'ssssssssssssssssssssssssssssR,rZ#UM/?R,Fp^l6$ARjbhJk C>i H'qT\\{<?'es#)#iK.YM{Rag2/!KB!k@5oXh.:Ts\";mGL,i&z5[P@M\"lzfB+Y,Twzfu~N^z\"mfqecVU{SmA{QA<Y8XX0<}J;Krm9W'g~?)DvDDLE7-'(u+-7Tfp&\\`F+7-?{%@=iEPLVY*a@A[b_6cfy~~0GcD_@b4Y=U?otJ(e#=I@b(lK%|5-Ido{f(x#mYtedHbSAWry*4g\\u6+|1Y=xW6>DW&&m ?I)IYQ&\\[?p=P.ec~^LC\\~$<5#|HB*o%:|!Szv.~L*?@&6v+UXGg0x3|5:,#c2\"e&x J'k[k<E>5;m1]zh\"dHt9QeHSTLY---Q6--m---2d-FH--kC---r-DP-ORPx/Xsssssssssssssssssssssssssssssssssssssssssssssssssssss', 
                        port = '64807/TCp', 
                        parameters = '', 
                        terms = 'n', 
                        policy = [
                            ''
                            ], )
                    ], 
                validity = openapi_client.models.time_range_entity.timeRangeEntity(
                    from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                disable = True, 
                certificates = [
                    openapi_client.models.certificates_entity.CertificatesEntity(
                        id = 1.337, )
                    ]
            )
        else :
            return ServiceEntity(
                id = 'BF01',
                name = 'e',
                type = 'vpn',
                cost = '.07',
                download_speed = 0,
                upload_speed = 0,
                disable = True,
        )

    def testServiceEntity(self):
        """Test ServiceEntity"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
